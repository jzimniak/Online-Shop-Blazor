@using Models

<div class="container mt-4">
    <div class="row ml-0 mr-0 justify-content-end">
        <span>
            Opis Produktu
        </span>
        <button class="btn btn-secondary" @onclick="(()=> {ShortDesc = new ShortDesc();ShortDesc.Text = new string[max_amount_of_single_des];ShortDesc.Title = new string[max_amount_of_single_des];ShortDesc.photos = new IBrowserFile[max_amount_of_single_des]; })">RESET</button>
        <button class="btn btn-danger" @onclick="(()=> { amount = (amount == 1) ? 1 : amount-1; StateHasChanged(); })">-</button>
        <button class="btn btn-success" @onclick="(() => { amount = (amount == max_amount_of_single_des) ? max_amount_of_single_des : amount+1; StateHasChanged(); } )">+</button>
    </div>
 
        @if (loading&&ShortDesc is not null)
        {
            <div class="row ml-0 mr-0">
                <form class="w-100">
                    @for (int i = 0; i < amount; i++)
                    {
                        var index = i;
                        <div class="form-group">
                            <label>Tytuł:</label>
                            <input type="text" @bind-value="@ShortDesc.Title[index]" placeholder="Tytuł" class="form-control"/>
                        </div>

                        <div class="form-group">
                            <label>Text:</label>
                            <textarea class="form-control" @bind="ShortDesc.Text[index]" style="resize:none;"></textarea>
                        </div>

                        <div class="form-group">
                            <label>zdjęcie</label>
                            <InputFile OnChange="@((InputFileChangeEventArgs e)=> { LoadFile(index,e); })" class="form-control-file"/>
                        </div>
                    }
                </form>              
            </div>

        }
        else
        {
            <div>
                <span>
                    Loading...
                </span>
            </div>
        }
</div>

@code {
    [Parameter]
    public int max_amount_of_single_des { get; set; }
    [Parameter]
    public int Result { get; set; }
    [Parameter]
    public ShortDesc ShortDesc { get; set; }
    [Parameter]
    public EventCallback<ShortDesc> ShortDescChanged { get; set; }

    private string[] texts { get; set; }
    private string[] titles { get; set; }
    private string[] photos  { get; set; }
    private int amount { get; set; }
    private bool loading { get; set; }
    private List<IBrowserFile> loadedFiles = new();

    protected override void OnInitialized()
    {
        amount = 1;
        ShortDesc = new ShortDesc();

        ShortDesc.Text = new string[max_amount_of_single_des];
        ShortDesc.Title = new string[max_amount_of_single_des];
        ShortDesc.photos = new IBrowserFile[max_amount_of_single_des];

        loading = true;
    }

    private Task OnShortDescChanged()
    {
        StateHasChanged();
        return ShortDescChanged.InvokeAsync(ShortDesc);
    }

    private void LoadFile(int index, InputFileChangeEventArgs e)
    {
        loadedFiles.Clear();

        foreach (var file in e.GetMultipleFiles(1))
        {
            try
            {
                ShortDesc.photos[index] = file;
            }
            catch (Exception)
            {
                throw;
            }
        }
        OnShortDescChanged();
    }
}
