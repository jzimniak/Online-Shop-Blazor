@using OnlineShop.Models.User
@using Microsoft.Extensions.Configuration
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage

@inject ProtectedLocalStorage BrowserStorage
@inject SimpleUserInfo SimpleUserInfo
@inject Services.Refresh_Component Refresh_Component
@inject IConfiguration _config
@inject NavigationManager NavigationManager

<div class="d-flex h-100">
    <div class="container">
        <EditForm Model="LoginModel" OnValidSubmit="Login">
            <DataAnnotationsValidator />
            <div class="row form-group">
                <label>Nazwa użytkownika:</label>
                <InputText @bind-Value="LoginModel.UserName" placeholder="login" class="form-control" />
                <ValidationMessage For="@(()=> LoginModel.UserName)" />
            </div>
            <div class="row form-group">
                <label>Hasło:</label>
                <InputText @bind-Value="LoginModel.Password" placeholder="password" class="form-control" type="password" />
                <ValidationMessage For="@(()=> LoginModel.Password)" />
            </div>
            <div class="row justify-content-end">
                <label class="mr-2 mt-auto">@info</label>
                @if (loading)
                {
                    <div class="lds-ring" style="height: 25px;"><div style="width:25px;height:25px;"></div><div style="width:25px;height:25px;"></div><div style="width:25px;height:25px;"></div><div style="width:25px;height:25px;"></div></div>
                }
                <button class="btn btn-primary" Type="submit" @onclick="(()=> loading=true)">Login</button>
            </div>
        </EditForm>
    </div>
</div>

@code {

    private Login LoginModel { get; set; }
    private string info { get; set; }
    private bool loading { get; set; }

    protected override void OnInitialized()
    {
        info = "";
        LoginModel = new();
    }
    private string GetRightUrl(string fullurl)
    {
        string r = "";
        if (fullurl.Contains("/c/"))
        {

            string x = fullurl.Split("/c/").Last();

            int z = 0;
            for (int i = 0; i < x.Length; i++)
            {
                if (i == 0)
                {
                    if (x[i] == '/')
                    {
                        z++;
                    }
                    r += x[i];
                }
                else
                {
                    if (x[i] != '/')
                    {
                        z = 0;
                        r += x[i];
                    }
                    else
                    {
                        if (z == 0)
                        {
                            z++;
                            r += x[i];
                        }
                        else
                        {
                        }
                    }
                }
            }

            if (r[r.Length - 1] == '/')
            {
                r.Remove(r.Length - 1);
            }
            if (r[0] == '/')
            {
                r.Remove(0, 1);
            }
        }

        return r;
    }
    private async void Login()
    {
        //to login with admin permission use admin and password
        if (LoginModel.UserName == "admin" && LoginModel.Password == "password")
        {
            SimpleUserInfo.ID = -1;
            SimpleUserInfo.IsLogged = true;
            SimpleUserInfo.Email = "";
            SimpleUserInfo.UserAddress = "";
            SimpleUserInfo.UserName = "admin";
            SimpleUserInfo.UserRole = "Admin";
            info = "";
            Refresh_Component.topMenuComponent.Refresh();
            await BrowserStorage.SetAsync("login", "True");
            await BrowserStorage.SetAsync("role", "Admin");
            await BrowserStorage.SetAsync("UserName", "Admin");
            StateHasChanged();
            StateHasChanged();
            string x =GetRightUrl(NavigationManager.Uri);

            if (NavigationManager.Uri.Contains("admin-panel"))
            {
                Refresh_Component.adminPanelPage.Refresh();
            }
            if (x.Count(f=>f=='/')==1)
            {
                Refresh_Component.opinionsComponent.Refresh();
            }
            loading = false;
            Refresh_Component.topMenuComponent.closewindow();
            Refresh_Component.topMenuComponent.Refresh();
        }
        else
        {
            if (await Additional_Functions.UserExist(LoginModel.UserName, _config))
            {
                UserSQL userSQL = await Additional_Functions.Get_User_From_SQL(LoginModel.UserName, _config);
                if (DataAccess.PasswordHashing.IsPasswordCorrect(userSQL.Salt, LoginModel.Password, userSQL.Passhash))
                {
                    SimpleUserInfo.ID = userSQL.ID;
                    SimpleUserInfo.IsLogged = true;
                    SimpleUserInfo.Email = userSQL.Email;
                    SimpleUserInfo.UserAddress = userSQL.UserAddres;
                    SimpleUserInfo.UserName = userSQL.UserName;
                    SimpleUserInfo.UserRole = userSQL.UserRole;
                    info = "";
                    Refresh_Component.topMenuComponent.Refresh();
                    loading = false;
                    await BrowserStorage.SetAsync("login", "True");
                    await BrowserStorage.SetAsync("role", SimpleUserInfo.UserRole);
                    await BrowserStorage.SetAsync("Email", SimpleUserInfo.Email);
                    await BrowserStorage.SetAsync("UserAddress", SimpleUserInfo.UserAddress);
                    await BrowserStorage.SetAsync("UserName", SimpleUserInfo.UserName);

                    StateHasChanged();
                    string x = GetRightUrl(NavigationManager.Uri);

                    if (NavigationManager.Uri.Contains("admin-panel"))
                    {
                        Refresh_Component.adminPanelPage.Refresh();
                    }
                    if (x.Count(f => f == '/') == 1)
                    {
                        Refresh_Component.opinionsComponent.Refresh();
                    }
                    Refresh_Component.topMenuComponent.closewindow();
                }
                else
                {
                    info = "Złe hasło";
                    loading = false;
                    StateHasChanged();
                }
            }
            else
            {
                info = "Nie ma takiego użytkownika";
                loading = false;
                StateHasChanged();
            }
        }
    }
}
