// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace OnlineShop.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\Users\jarek\Desktop\BlazorProject (Shop)\Project\OnlineShop\OnlineShop\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\jarek\Desktop\BlazorProject (Shop)\Project\OnlineShop\OnlineShop\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\jarek\Desktop\BlazorProject (Shop)\Project\OnlineShop\OnlineShop\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\jarek\Desktop\BlazorProject (Shop)\Project\OnlineShop\OnlineShop\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\jarek\Desktop\BlazorProject (Shop)\Project\OnlineShop\OnlineShop\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\jarek\Desktop\BlazorProject (Shop)\Project\OnlineShop\OnlineShop\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\jarek\Desktop\BlazorProject (Shop)\Project\OnlineShop\OnlineShop\_Imports.razor"
using Microsoft.AspNetCore.Components.Web.Virtualization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\jarek\Desktop\BlazorProject (Shop)\Project\OnlineShop\OnlineShop\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Users\jarek\Desktop\BlazorProject (Shop)\Project\OnlineShop\OnlineShop\_Imports.razor"
using OnlineShop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "C:\Users\jarek\Desktop\BlazorProject (Shop)\Project\OnlineShop\OnlineShop\_Imports.razor"
using OnlineShop.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "C:\Users\jarek\Desktop\BlazorProject (Shop)\Project\OnlineShop\OnlineShop\_Imports.razor"
using OnlineShop.Pages;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "C:\Users\jarek\Desktop\BlazorProject (Shop)\Project\OnlineShop\OnlineShop\_Imports.razor"
using OnlineShop.Components;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "C:\Users\jarek\Desktop\BlazorProject (Shop)\Project\OnlineShop\OnlineShop\_Imports.razor"
using Newtonsoft.Json;

#line default
#line hidden
#nullable disable
#nullable restore
#line 14 "C:\Users\jarek\Desktop\BlazorProject (Shop)\Project\OnlineShop\OnlineShop\_Imports.razor"
using System.IO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 15 "C:\Users\jarek\Desktop\BlazorProject (Shop)\Project\OnlineShop\OnlineShop\_Imports.razor"
using Functions;

#line default
#line hidden
#nullable disable
#nullable restore
#line 16 "C:\Users\jarek\Desktop\BlazorProject (Shop)\Project\OnlineShop\OnlineShop\_Imports.razor"
using Services;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\jarek\Desktop\BlazorProject (Shop)\Project\OnlineShop\OnlineShop\Pages\ProductListPage.razor"
using Microsoft.AspNetCore.WebUtilities;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\jarek\Desktop\BlazorProject (Shop)\Project\OnlineShop\OnlineShop\Pages\ProductListPage.razor"
using DataAccess;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\jarek\Desktop\BlazorProject (Shop)\Project\OnlineShop\OnlineShop\Pages\ProductListPage.razor"
using Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\jarek\Desktop\BlazorProject (Shop)\Project\OnlineShop\OnlineShop\Pages\ProductListPage.razor"
using OnlineShop.Components.ProductList;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\jarek\Desktop\BlazorProject (Shop)\Project\OnlineShop\OnlineShop\Pages\ProductListPage.razor"
using Microsoft.AspNetCore.Hosting;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/c/{category:int}")]
    public partial class ProductListPage : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 1686 "C:\Users\jarek\Desktop\BlazorProject (Shop)\Project\OnlineShop\OnlineShop\Pages\ProductListPage.razor"
       
    [Parameter]
    public int category { get; set; }

    public List<Product<Processor>> processor = new List<Product<Processor>>();
    public List<Product<ComputerCase>> computercase = new List<Product<ComputerCase>>();
    public List<Product<Disc>> disc = new List<Product<Disc>>();
    public List<Product<Motherboard>> motherboard = new List<Product<Motherboard>>();
    public List<Product<GraphicCard>> graphiccard = new List<Product<GraphicCard>>();
    public List<Product<PowerSupply>> Powersupply = new List<Product<PowerSupply>>();
    public List<Product<Radiator>> radiator = new List<Product<Radiator>>();
    public List<Product<Ram>> ram = new List<Product<Ram>>();
    private List<Opinions> opinions = new List<Opinions>();

    private List<Product<Processor>> searched_processor = new List<Product<Processor>>();
    private List<Product<ComputerCase>> searched_computercase = new List<Product<ComputerCase>>();
    private List<Product<Disc>> searched_disc = new List<Product<Disc>>();
    private List<Product<Motherboard>> searched_motherboard = new List<Product<Motherboard>>();
    private List<Product<GraphicCard>> searched_graphiccard = new List<Product<GraphicCard>>();
    private List<Product<PowerSupply>> searched_Powersupply = new List<Product<PowerSupply>>();
    private List<Product<Radiator>> searched_radiator = new List<Product<Radiator>>();
    private List<Product<Ram>> searched_ram = new List<Product<Ram>>();
    private List<ProductSearch> list = new List<ProductSearch>();

    private bool loading { get; set; }
    private string searchtext { get; set; }
    private int amount_opinion_on_page { get; set; }
    public int rows { get { return this.amount_opinion_on_page; } set { page_number_selected = 1; this.amount_opinion_on_page = value; } }
    public int page_number_selected { get; set; }

    protected async override Task OnInitializedAsync()
    {

        page_number_selected = 1;
        amount_opinion_on_page = 5;
        opinions = await Additional_Functions.Read_Opinions_From_JSON(env);
        Uri currenturi = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        if (!Additional_Functions.Check_if_url_has_right_query(currenturi, category))
        {
            await Load_Products();
        }

        loading = true;
        NavigationManager.LocationChanged += NavigationManager_LocationChanged;
    }

    private void NavigationManager_LocationChanged(object sender, LocationChangedEventArgs e)
    {
        base.InvokeAsync(async () =>
        {
            Uri currenturi = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
            if (currenturi.Query.Length == 0)
            {
                await Load_Products();
                StateHasChanged();
            }
            if (QueryHelpers.ParseQuery(currenturi.Query).TryGetValue("search", out var _initialCount))
            {
                searched_processor = new List<Product<Processor>>();
                searched_computercase = new List<Product<ComputerCase>>();
                searched_disc = new List<Product<Disc>>();
                searched_motherboard = new List<Product<Motherboard>>();
                searched_graphiccard = new List<Product<GraphicCard>>();
                searched_Powersupply = new List<Product<PowerSupply>>();
                searched_radiator = new List<Product<Radiator>>();
                searched_ram = new List<Product<Ram>>();
                searchtext = _initialCount;
                list = await _data.LoadData<ProductSearch, dynamic>("select [Id],[prname] as 'Name',[price],[brand],[warranty],[producttype] from Products where prname like '%" + searchtext + "%'", new { });
                foreach (var item in list)
                {
                    switch (item.producttype)
                    {
                        case "computercase":
                            List<ComputerCase> list1 = await _data.LoadData<ComputerCase, dynamic>("select * from ComputerCases where productID=" + item.Id, new { });
                            searched_computercase.Add(new Product<ComputerCase>() { Id = item.Id, Brand = item.Brand, Name = item.Name, Price = item.Price, producttype = item.producttype, Warranty = item.Warranty, Attributes = list1[0] });
                            break;
                        case "disc":
                            List<Disc> list2 = await _data.LoadData<Disc, dynamic>("select * from Discs where productID=" + item.Id, new { });
                            searched_disc.Add(new Product<Disc>() { Id = item.Id, Brand = item.Brand, Name = item.Name, Price = item.Price, producttype = item.producttype, Warranty = item.Warranty, Attributes = list2[0] });

                            break;
                        case "motherboard":
                            List<Motherboard> list3 = await _data.LoadData<Motherboard, dynamic>("select * from Motherboards where productID=" + item.Id, new { });
                            searched_motherboard.Add(new Product<Motherboard>() { Id = item.Id, Brand = item.Brand, Name = item.Name, Price = item.Price, producttype = item.producttype, Warranty = item.Warranty, Attributes = list3[0] });

                            break;
                        case "graphiccard":
                            List<GraphicCard> list4 = await _data.LoadData<GraphicCard, dynamic>("select * from GraphicCards where productID=" + item.Id, new { });
                            searched_graphiccard.Add(new Product<GraphicCard>() { Id = item.Id, Brand = item.Brand, Name = item.Name, Price = item.Price, producttype = item.producttype, Warranty = item.Warranty, Attributes = list4[0] });

                            break;
                        case "powersupply":
                            List<PowerSupply> list5 = await _data.LoadData<PowerSupply, dynamic>("select * from PowerSupply where productID=" + item.Id, new { });
                            searched_Powersupply.Add(new Product<PowerSupply>() { Id = item.Id, Brand = item.Brand, Name = item.Name, Price = item.Price, producttype = item.producttype, Warranty = item.Warranty, Attributes = list5[0] });

                            break;
                        case "processor":
                            List<Processor> list6 = await _data.LoadData<Processor, dynamic>("select * from Processors where productID=" + item.Id, new { });
                            searched_processor.Add(new Product<Processor>() { Id = item.Id, Brand = item.Brand, Name = item.Name, Price = item.Price, producttype = item.producttype, Warranty = item.Warranty, Attributes = list6[0] });

                            break;
                        case "radiator":
                            List<Radiator> list7 = await _data.LoadData<Radiator, dynamic>("select * from Radiators where productID=" + item.Id, new { });
                            searched_radiator.Add(new Product<Radiator>() { Id = item.Id, Brand = item.Brand, Name = item.Name, Price = item.Price, producttype = item.producttype, Warranty = item.Warranty, Attributes = list7[0] });

                            break;
                        case "ram":
                            List<Ram> list8 = await _data.LoadData<Ram, dynamic>("select * from Rams where productID=" + item.Id, new { });
                            searched_ram.Add(new Product<Ram>() { Id = item.Id, Brand = item.Brand, Name = item.Name, Price = item.Price, producttype = item.producttype, Warranty = item.Warranty, Attributes = list8[0] });

                            break;
                        default:
                            break;
                    }
                }
                list = new List<ProductSearch>();
                foreach (var item in searched_processor)
                {
                    list.Add(new ProductSearch() { Id = item.Id, Brand = item.Brand, Name = item.Name, Price = item.Price, producttype = item.producttype, Warranty = item.Warranty, Photo = item.Attributes.Photo, Attributes = new List<string> { "Seria: " + item.Attributes.Processor_number, "Taktowanie: " + item.Attributes.Frequency, "Liczba rdzeni: " + item.Attributes.Cores.ToString(), "Cache: " + item.Attributes.Cache } });
                }
                foreach (var item in searched_computercase)
                {
                    list.Add(new ProductSearch() { Id = item.Id, Brand = item.Brand, Name = item.Name, Price = item.Price, producttype = item.producttype, Warranty = item.Warranty, Photo = item.Attributes.Photo, Attributes = new List<string> { "Typ: " + item.Attributes.Type, "Standard płyty: " + item.Attributes.Motherboards_typeSTR, "Karty rozszerzeń: " + item.Attributes.Extension_cards.ToString(), "Maks. długość grafiki: " + item.Attributes.Max_graphic_card_length.ToString() + " mm" } });
                }
                foreach (var item in searched_disc)
                {
                    list.Add(new ProductSearch() { Id = item.Id, Brand = item.Brand, Name = item.Name, Price = item.Price, producttype = item.producttype, Warranty = item.Warranty, Photo = item.Attributes.Photo, Attributes = new List<string> { "Pojemność: " + item.Attributes.Capacity.ToString() + " GB", "Interfejs: " + item.Attributes.Interfaces, "Prędkość odczytu: " + item.Attributes.Read_speed.ToString() + " MB/s", "Prędkość zapisu: " + item.Attributes.Write_speed.ToString() + " MB/s" } });
                }
                foreach (var item in searched_graphiccard)
                {
                    list.Add(new ProductSearch() { Id = item.Id, Brand = item.Brand, Name = item.Name, Price = item.Price, producttype = item.producttype, Warranty = item.Warranty, Photo = item.Attributes.Photo, Attributes = new List<string> { "Układ: " + item.Attributes.Graphics_processing, "Pamięć: " + item.Attributes.Memory_size.ToString() + " GB", "Rodzaj pamięci: " + item.Attributes.Memory_type, "Złącza: " + item.Attributes.OutputsSTR } });
                }
                foreach (var item in searched_motherboard)
                {
                    list.Add(new ProductSearch() { Id = item.Id, Brand = item.Brand, Name = item.Name, Price = item.Price, producttype = item.producttype, Warranty = item.Warranty, Photo = item.Attributes.Photo, Attributes = new List<string> { "Gniazdo procesora: " + item.Attributes.Socket, "Format: " + item.Attributes.Format, "Chipset: " + item.Attributes.Chipset, "Max wielkość RAM: " + item.Attributes.Memory_max_size.ToString() + " GB" } });
                }
                foreach (var item in searched_Powersupply)
                {
                    list.Add(new ProductSearch() { Id = item.Id, Brand = item.Brand, Name = item.Name, Price = item.Price, producttype = item.producttype, Warranty = item.Warranty, Photo = item.Attributes.Photo, Attributes = new List<string> { "Moc: " + item.Attributes.Power.ToString() + " W", "Standard: " + item.Attributes.Standard, "Sprawność: " + item.Attributes.Efficiency, "Certyfikat: " + item.Attributes.Certificate } });
                }
                foreach (var item in searched_radiator)
                {
                    list.Add(new ProductSearch() { Id = item.Id, Brand = item.Brand, Name = item.Name, Price = item.Price, producttype = item.producttype, Warranty = item.Warranty, Photo = item.Attributes.Photo, Attributes = new List<string> { "Rodzaj chłodzenia: " + item.Attributes.Cooling_type, "Kompatybilność: " + item.Attributes.SocketsSTR, "Wentylatory: " + item.Attributes.FansSTR, "Max głośność: " + item.Attributes.Max_dB } });
                }
                foreach (var item in searched_ram)
                {
                    list.Add(new ProductSearch() { Id = item.Id, Brand = item.Brand, Name = item.Name, Price = item.Price, producttype = item.producttype, Warranty = item.Warranty, Photo = item.Attributes.Photo, Attributes = new List<string> { "Całkowita pojemność: " + item.Attributes.Memory_size_full.ToString() + " GB", "Rodzaj pamięci: " + item.Attributes.Memory_type, "Taktowanie: " + item.Attributes.Frequency, "Opóźnienie: " + item.Attributes.Cycle_latency } });
                }
                StateHasChanged();
            }

        });
    }

    private async Task Load_Products()
    {
        switch (category)
        {
            case 1:
                processor = await Additional_Functions.Read_Processors_From_JSON(env);
                Console.WriteLine();
                break;
            case 2:
                computercase = await Additional_Functions.Read_Computercases_From_JSON(env);
                break;
            case 3:
                disc = await Additional_Functions.Read_Discs_From_JSON(env);
                break;
            case 4:
                graphiccard = await Additional_Functions.Read_GraphicCards_From_JSON(env);
                break;
            case 5:
                motherboard = await Additional_Functions.Read_Motherboards_From_JSON(env);
                break;
            case 6:
                Powersupply = await Additional_Functions.Read_PowerSupplies_From_JSON(env);
                break;
            case 7:
                radiator = await Additional_Functions.Read_Radiators_From_JSON(env);
                break;
            case 8:
                ram = await Additional_Functions.Read_Rams_From_JSON(env);
                break;
            case 9:
                Uri currenturi = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
                searchtext = "";
                if (QueryHelpers.ParseQuery(currenturi.Query).TryGetValue("search", out var _initialCount))
                {
                    searchtext = _initialCount;
                    list = await _data.LoadData<ProductSearch, dynamic>("select [Id],[prname] as 'Name',[price],[brand],[warranty],[producttype] from Products where prname like '%" + searchtext + "%'", new { });
                    foreach (var item in list)
                    {
                        switch (item.producttype)
                        {
                            case "computercase":
                                List<ComputerCase> list1 = await _data.LoadData<ComputerCase, dynamic>("select * from ComputerCases where productID=" + item.Id, new { });
                                searched_computercase.Add(new Product<ComputerCase>() { Id = item.Id, Brand = item.Brand, Name = item.Name, Price = item.Price, producttype = item.producttype, Warranty = item.Warranty, Attributes = list1[0] });
                                break;
                            case "disc":
                                List<Disc> list2 = await _data.LoadData<Disc, dynamic>("select * from Discs where productID=" + item.Id, new { });
                                searched_disc.Add(new Product<Disc>() { Id = item.Id, Brand = item.Brand, Name = item.Name, Price = item.Price, producttype = item.producttype, Warranty = item.Warranty, Attributes = list2[0] });

                                break;
                            case "motherboard":
                                List<Motherboard> list3 = await _data.LoadData<Motherboard, dynamic>("select * from Motherboards where productID=" + item.Id, new { });
                                searched_motherboard.Add(new Product<Motherboard>() { Id = item.Id, Brand = item.Brand, Name = item.Name, Price = item.Price, producttype = item.producttype, Warranty = item.Warranty, Attributes = list3[0] });

                                break;
                            case "graphiccard":
                                List<GraphicCard> list4 = await _data.LoadData<GraphicCard, dynamic>("select * from GraphicCards where productID=" + item.Id, new { });
                                searched_graphiccard.Add(new Product<GraphicCard>() { Id = item.Id, Brand = item.Brand, Name = item.Name, Price = item.Price, producttype = item.producttype, Warranty = item.Warranty, Attributes = list4[0] });

                                break;
                            case "powersupply":
                                List<PowerSupply> list5 = await _data.LoadData<PowerSupply, dynamic>("select * from PowerSupply where productID=" + item.Id, new { });
                                searched_Powersupply.Add(new Product<PowerSupply>() { Id = item.Id, Brand = item.Brand, Name = item.Name, Price = item.Price, producttype = item.producttype, Warranty = item.Warranty, Attributes = list5[0] });

                                break;
                            case "processor":
                                List<Processor> list6 = await _data.LoadData<Processor, dynamic>("select * from Processors where productID=" + item.Id, new { });
                                searched_processor.Add(new Product<Processor>() { Id = item.Id, Brand = item.Brand, Name = item.Name, Price = item.Price, producttype = item.producttype, Warranty = item.Warranty, Attributes = list6[0] });

                                break;
                            case "radiator":
                                List<Radiator> list7 = await _data.LoadData<Radiator, dynamic>("select * from Radiators where productID=" + item.Id, new { });
                                searched_radiator.Add(new Product<Radiator>() { Id = item.Id, Brand = item.Brand, Name = item.Name, Price = item.Price, producttype = item.producttype, Warranty = item.Warranty, Attributes = list7[0] });

                                break;
                            case "ram":
                                List<Ram> list8 = await _data.LoadData<Ram, dynamic>("select * from Rams where productID=" + item.Id, new { });
                                searched_ram.Add(new Product<Ram>() { Id = item.Id, Brand = item.Brand, Name = item.Name, Price = item.Price, producttype = item.producttype, Warranty = item.Warranty, Attributes = list8[0] });

                                break;
                            default:
                                break;
                        }
                    }
                    list = new List<ProductSearch>();
                    foreach (var item in searched_processor)
                    {
                        list.Add(new ProductSearch() { Id = item.Id, Brand = item.Brand, Name = item.Name, Price = item.Price, producttype = item.producttype, Warranty = item.Warranty, Photo = item.Attributes.Photo, Attributes = new List<string> { "Seria: " + item.Attributes.Processor_number, "Taktowanie: " + item.Attributes.Frequency, "Liczba rdzeni: " + item.Attributes.Cores.ToString(), "Cache: " + item.Attributes.Cache } });
                    }
                    foreach (var item in searched_computercase)
                    {
                        list.Add(new ProductSearch() { Id = item.Id, Brand = item.Brand, Name = item.Name, Price = item.Price, producttype = item.producttype, Warranty = item.Warranty, Photo = item.Attributes.Photo, Attributes = new List<string> { "Typ: " + item.Attributes.Type, "Standard płyty: " + item.Attributes.Motherboards_typeSTR, "Karty rozszerzeń: " + item.Attributes.Extension_cards.ToString(), "Maks. długość grafiki: " + item.Attributes.Max_graphic_card_length.ToString() + " mm" } });
                    }
                    foreach (var item in searched_disc)
                    {
                        list.Add(new ProductSearch() { Id = item.Id, Brand = item.Brand, Name = item.Name, Price = item.Price, producttype = item.producttype, Warranty = item.Warranty, Photo = item.Attributes.Photo, Attributes = new List<string> { "Pojemność: " + item.Attributes.Capacity.ToString() + " GB", "Interfejs: " + item.Attributes.Interfaces, "Prędkość odczytu: " + item.Attributes.Read_speed.ToString() + " MB/s", "Prędkość zapisu: " + item.Attributes.Write_speed.ToString() + " MB/s" } });
                    }
                    foreach (var item in searched_graphiccard)
                    {
                        list.Add(new ProductSearch() { Id = item.Id, Brand = item.Brand, Name = item.Name, Price = item.Price, producttype = item.producttype, Warranty = item.Warranty, Photo = item.Attributes.Photo, Attributes = new List<string> { "Układ: " + item.Attributes.Graphics_processing, "Pamięć: " + item.Attributes.Memory_size.ToString() + " GB", "Rodzaj pamięci: " + item.Attributes.Memory_type, "Złącza: " + item.Attributes.OutputsSTR } });
                    }
                    foreach (var item in searched_motherboard)
                    {
                        list.Add(new ProductSearch() { Id = item.Id, Brand = item.Brand, Name = item.Name, Price = item.Price, producttype = item.producttype, Warranty = item.Warranty, Photo = item.Attributes.Photo, Attributes = new List<string> { "Gniazdo procesora: " + item.Attributes.Socket, "Format: " + item.Attributes.Format, "Chipset: " + item.Attributes.Chipset, "Max wielkość RAM: " + item.Attributes.Memory_max_size.ToString() + " GB" } });
                    }
                    foreach (var item in searched_Powersupply)
                    {
                        list.Add(new ProductSearch() { Id = item.Id, Brand = item.Brand, Name = item.Name, Price = item.Price, producttype = item.producttype, Warranty = item.Warranty, Photo = item.Attributes.Photo, Attributes = new List<string> { "Moc: " + item.Attributes.Power.ToString() + " W", "Standard: " + item.Attributes.Standard, "Sprawność: " + item.Attributes.Efficiency, "Certyfikat: " + item.Attributes.Certificate } });
                    }
                    foreach (var item in searched_radiator)
                    {
                        list.Add(new ProductSearch() { Id = item.Id, Brand = item.Brand, Name = item.Name, Price = item.Price, producttype = item.producttype, Warranty = item.Warranty, Photo = item.Attributes.Photo, Attributes = new List<string> { "Rodzaj chłodzenia: " + item.Attributes.Cooling_type, "Kompatybilność: " + item.Attributes.SocketsSTR, "Wentylatory: " + item.Attributes.FansSTR, "Max głośność: " + item.Attributes.Max_dB } });
                    }
                    foreach (var item in searched_ram)
                    {
                        list.Add(new ProductSearch() { Id = item.Id, Brand = item.Brand, Name = item.Name, Price = item.Price, producttype = item.producttype, Warranty = item.Warranty, Photo = item.Attributes.Photo, Attributes = new List<string> { "Całkowita pojemność: " + item.Attributes.Memory_size_full.ToString() + " GB", "Rodzaj pamięci: " + item.Attributes.Memory_type, "Taktowanie: " + item.Attributes.Frequency, "Opóźnienie: " + item.Attributes.Cycle_latency } });
                    }
                    StateHasChanged();
                }
                break;
            default:
                break;
        }
    }

    public void changeprocessors(List<Product<Processor>> processors)
    {
        processor = processors;
        StateHasChanged();
    }
    public void changecomputercase(List<Product<ComputerCase>> computercases)
    {
        computercase = computercases;
        StateHasChanged();
    }
    public void changedisc(List<Product<Disc>> discs)
    {
        disc = discs;
        StateHasChanged();
    }
    public void changegraphiccard(List<Product<GraphicCard>> graphiccards)
    {
        graphiccard = graphiccards;
        StateHasChanged();
    }
    public void changemotherboard(List<Product<Motherboard>> motherboards)
    {
        motherboard = motherboards;
        StateHasChanged();
    }
    public void changepowersupply(List<Product<PowerSupply>> powersupplies)
    {
        Powersupply = powersupplies;
        StateHasChanged();
    }
    public void changeradiator(List<Product<Radiator>> radiators)
    {
        radiator = radiators;
        StateHasChanged();
    }
    public void changeram(List<Product<Ram>> rams)
    {
        ram = rams;
        StateHasChanged();
    }

    private string Navigate_to_Product_Page(int index, string product = "")
    {
        string url = "";
        if (product.Length == 0)
        {
            url = NavigationManager.Uri;
            url = (url.Split('?')[0].EndsWith('/')) ? url.Split('?')[0] : url.Split('?')[0] + "/";
        }
        switch (product)
        {
            case "processor":
                url = NavigationManager.BaseUri + "c/1/";
                break;
            case "disc":
                url = NavigationManager.BaseUri + "c/3/";
                break;
            case "computercase":
                url = NavigationManager.BaseUri + "c/2/";
                break;
            case "motherboard":
                url = NavigationManager.BaseUri + "c/5/";
                break;
            case "powersupply":
                url = NavigationManager.BaseUri + "c/6/";
                break;
            case "graphiccard":
                url = NavigationManager.BaseUri + "c/4/";
                break;
            case "radiator":
                url = NavigationManager.BaseUri + "c/7/";
                break;
            case "ram":
                url = NavigationManager.BaseUri + "c/8/";
                break;
            default:
                break;
        }
        return url + index;
    }

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NavigationManager NavigationManager { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private SqlDataAccess _data { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IWebHostEnvironment env { get; set; }
    }
}
#pragma warning restore 1591
