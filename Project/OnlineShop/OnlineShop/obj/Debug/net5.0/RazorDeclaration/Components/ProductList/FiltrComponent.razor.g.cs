// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace OnlineShop.Components.ProductList
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\Users\jarek\Desktop\BlazorProject (Shop)\Project\OnlineShop\OnlineShop\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\jarek\Desktop\BlazorProject (Shop)\Project\OnlineShop\OnlineShop\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\jarek\Desktop\BlazorProject (Shop)\Project\OnlineShop\OnlineShop\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\jarek\Desktop\BlazorProject (Shop)\Project\OnlineShop\OnlineShop\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\jarek\Desktop\BlazorProject (Shop)\Project\OnlineShop\OnlineShop\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\jarek\Desktop\BlazorProject (Shop)\Project\OnlineShop\OnlineShop\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\jarek\Desktop\BlazorProject (Shop)\Project\OnlineShop\OnlineShop\_Imports.razor"
using Microsoft.AspNetCore.Components.Web.Virtualization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\jarek\Desktop\BlazorProject (Shop)\Project\OnlineShop\OnlineShop\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Users\jarek\Desktop\BlazorProject (Shop)\Project\OnlineShop\OnlineShop\_Imports.razor"
using OnlineShop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "C:\Users\jarek\Desktop\BlazorProject (Shop)\Project\OnlineShop\OnlineShop\_Imports.razor"
using OnlineShop.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "C:\Users\jarek\Desktop\BlazorProject (Shop)\Project\OnlineShop\OnlineShop\_Imports.razor"
using OnlineShop.Pages;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "C:\Users\jarek\Desktop\BlazorProject (Shop)\Project\OnlineShop\OnlineShop\_Imports.razor"
using OnlineShop.Components;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "C:\Users\jarek\Desktop\BlazorProject (Shop)\Project\OnlineShop\OnlineShop\_Imports.razor"
using Newtonsoft.Json;

#line default
#line hidden
#nullable disable
#nullable restore
#line 14 "C:\Users\jarek\Desktop\BlazorProject (Shop)\Project\OnlineShop\OnlineShop\_Imports.razor"
using System.IO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 15 "C:\Users\jarek\Desktop\BlazorProject (Shop)\Project\OnlineShop\OnlineShop\_Imports.razor"
using Functions;

#line default
#line hidden
#nullable disable
#nullable restore
#line 1 "C:\Users\jarek\Desktop\BlazorProject (Shop)\Project\OnlineShop\OnlineShop\Components\ProductList\FiltrComponent.razor"
using Models.Filtrs;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\jarek\Desktop\BlazorProject (Shop)\Project\OnlineShop\OnlineShop\Components\ProductList\FiltrComponent.razor"
using Services;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\jarek\Desktop\BlazorProject (Shop)\Project\OnlineShop\OnlineShop\Components\ProductList\FiltrComponent.razor"
using Microsoft.AspNetCore.WebUtilities;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\jarek\Desktop\BlazorProject (Shop)\Project\OnlineShop\OnlineShop\Components\ProductList\FiltrComponent.razor"
using Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\jarek\Desktop\BlazorProject (Shop)\Project\OnlineShop\OnlineShop\Components\ProductList\FiltrComponent.razor"
using Microsoft.AspNetCore.Hosting;

#line default
#line hidden
#nullable disable
    public partial class FiltrComponent : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 384 "C:\Users\jarek\Desktop\BlazorProject (Shop)\Project\OnlineShop\OnlineShop\Components\ProductList\FiltrComponent.razor"
       
    [Parameter]
    public string product { get; set; }
    [Parameter]
    public Uri currenturi { get; set; }
    [Parameter]
    public int categoryID { get; set; }

    public Filtr_Processor filtr_Processor = new Filtr_Processor();
    public Filtr_Ram filtr_Ram = new Filtr_Ram();
    public Filtr_Radiator filtr_Radiator = new Filtr_Radiator();
    public Filtr_PowerSupply filtr_PowerSupply = new Filtr_PowerSupply();
    public Filtr_Motherboard filtr_Motherboard = new Filtr_Motherboard();
    public Filtr_GraphicCard filtr_GraphicCard = new Filtr_GraphicCard();
    public Filtr_Disc filtr_Disc = new Filtr_Disc();
    public Filtr_ComputerCase filtr_ComputerCase = new Filtr_ComputerCase();

    [CascadingParameter] ProductListPage productList { get; set; }

    protected override void OnInitialized()
    {
        bool right_querry = false;
        using (StreamReader r = new StreamReader(env.WebRootPath + $"\\json\\distinct.json"))
        {
            string json = r.ReadToEnd();
            distinctService.json_Distinct = JsonConvert.DeserializeObject<OnlineShop.Services.Json_distinct>(json);
        }
        switch (categoryID)
        {
            case 1:
                if (QueryHelpers.ParseQuery(currenturi.Query).TryGetValue("brand", out var output1))
                {
                    filtr_Processor.Brand = new List<string> { output1 };
                    right_querry = true;
                }
                if (QueryHelpers.ParseQuery(currenturi.Query).TryGetValue("family", out var output2))
                {
                    filtr_Processor.Family = new List<string> { output2 }; right_querry = true;
                }
                if (right_querry)
                {
                    processor_search();
                }
                right_querry = false;
                break;
            case 2:
                if (QueryHelpers.ParseQuery(currenturi.Query).TryGetValue("casetype", out var output3))
                {
                    filtr_ComputerCase.Type = new List<string> { output3 }; right_querry = true;
                }
                if (QueryHelpers.ParseQuery(currenturi.Query).TryGetValue("motherboard_type", out var output4))
                {
                    filtr_ComputerCase.Motherboardstype = new List<string> { output4 }; right_querry = true;
                }
                if (right_querry)
                {
                    computercase_search();
                }
                right_querry = false;
                break;
            case 3:
                if (QueryHelpers.ParseQuery(currenturi.Query).TryGetValue("disctype", out var output5))
                {
                    filtr_Disc.Type = new List<string> { output5 }; right_querry = true;
                }
                if (QueryHelpers.ParseQuery(currenturi.Query).TryGetValue("discformat", out var output6))
                {
                    filtr_Disc.Format = new List<string> { output6 }; right_querry = true;
                }
                if (right_querry)
                {
                    disc_search();
                }
                right_querry = false;
                break;
            case 4:
                if (QueryHelpers.ParseQuery(currenturi.Query).TryGetValue("producent", out var output7))
                {
                    filtr_GraphicCard.Producent = new List<string> { output7 }; right_querry = true;
                }
                if (QueryHelpers.ParseQuery(currenturi.Query).TryGetValue("processor", out var output8))
                {
                    filtr_GraphicCard.Graphics_processing = new List<string> { output8 }; right_querry = true;
                }
                if (right_querry)
                {
                    graphiccard_search();
                }
                right_querry = false;
                break;
            case 5:
                if (QueryHelpers.ParseQuery(currenturi.Query).TryGetValue("format", out var output9))
                {
                    filtr_Motherboard.Format = new List<string> { output9 }; right_querry = true;
                }
                if (QueryHelpers.ParseQuery(currenturi.Query).TryGetValue("socket", out var output10))
                {
                    filtr_Motherboard.Socket = new List<string> { output10 }; right_querry = true;
                }
                if (right_querry)
                {
                    motherboard_search();
                }
                right_querry = false;
                break;
            case 6:
                if (QueryHelpers.ParseQuery(currenturi.Query).TryGetValue("standard", out var output11))
                {
                    filtr_PowerSupply.Standard = new List<string> { output11 }; right_querry = true;
                }
                if (QueryHelpers.ParseQuery(currenturi.Query).TryGetValue("certificate", out var output12))
                {
                    filtr_PowerSupply.Certificate = new List<string> { output12 }; right_querry = true;
                }
                if (right_querry)
                {
                    powersupply_search();
                }
                right_querry = false;
                break;
            case 7:
                if (QueryHelpers.ParseQuery(currenturi.Query).TryGetValue("type", out var output13))
                {
                    filtr_Radiator.Cooling_type = new List<string> { output13 }; right_querry = true;
                }
                if (QueryHelpers.ParseQuery(currenturi.Query).TryGetValue("socket", out var output14))
                {
                    filtr_Radiator.Socket = new List<string> { output14 }; right_querry = true;
                }
                if (right_querry)
                {
                    radiator_search();
                }
                right_querry = false;
                break;
            case 8:
                if (QueryHelpers.ParseQuery(currenturi.Query).TryGetValue("type", out var output15))
                {
                    filtr_Ram.Memory_type = new List<string> { output15 }; right_querry = true;
                }
                if (QueryHelpers.ParseQuery(currenturi.Query).TryGetValue("gb", out var output16))
                {
                    filtr_Ram.Memory_size_full = new List<string> { output16 }; right_querry = true;
                }
                if (right_querry)
                {
                    ram_search();
                }
                right_querry = false;
                break;
            default:
                break;
        }
        NavigationManager.LocationChanged += NavigationManager_LocationChanged;
    }

    private void NavigationManager_LocationChanged(object sender, LocationChangedEventArgs e)
    {
        bool right_querry = false;
        Uri currenturi = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        switch (categoryID)
        {
            case 1:
                filtr_Processor = new();
                if (QueryHelpers.ParseQuery(currenturi.Query).TryGetValue("brand", out var output1))
                {
                    filtr_Processor.Brand = new List<string> { output1 };
                    right_querry = true;
                }
                if (QueryHelpers.ParseQuery(currenturi.Query).TryGetValue("family", out var output2))
                {
                    filtr_Processor.Family = new List<string> { output2 }; right_querry = true;
                }
                if (right_querry)
                {
                    processor_search();
                }

                break;
            case 2:
                filtr_ComputerCase = new();
                if (QueryHelpers.ParseQuery(currenturi.Query).TryGetValue("casetype", out var output3))
                {
                    filtr_ComputerCase.Type = new List<string> { output3 }; right_querry = true;
                }
                if (QueryHelpers.ParseQuery(currenturi.Query).TryGetValue("motherboard_type", out var output4))
                {
                    filtr_ComputerCase.Motherboardstype = new List<string> { output4 }; right_querry = true;
                }
                if (right_querry)
                {
                    computercase_search();
                }

                break;
            case 3:
                filtr_Disc = new();
                if (QueryHelpers.ParseQuery(currenturi.Query).TryGetValue("disctype", out var output5))
                {
                    filtr_Disc.Type = new List<string> { output5 }; right_querry = true;
                }
                if (QueryHelpers.ParseQuery(currenturi.Query).TryGetValue("discformat", out var output6))
                {
                    filtr_Disc.Format = new List<string> { output6 }; right_querry = true;
                }
                if (right_querry)
                {
                    disc_search();
                }

                break;
            case 4:
                filtr_GraphicCard = new();
                if (QueryHelpers.ParseQuery(currenturi.Query).TryGetValue("producent", out var output7))
                {
                    filtr_GraphicCard.Producent = new List<string> { output7 }; right_querry = true;
                }
                if (QueryHelpers.ParseQuery(currenturi.Query).TryGetValue("processor", out var output8))
                {
                    filtr_GraphicCard.Graphics_processing = new List<string> { output8 }; right_querry = true;
                }
                if (right_querry)
                {
                    graphiccard_search();
                }

                break;
            case 5:
                filtr_Motherboard = new();
                if (QueryHelpers.ParseQuery(currenturi.Query).TryGetValue("format", out var output9))
                {
                    filtr_Motherboard.Format = new List<string> { output9 }; right_querry = true;
                }
                if (QueryHelpers.ParseQuery(currenturi.Query).TryGetValue("socket", out var output10))
                {
                    filtr_Motherboard.Socket = new List<string> { output10 }; right_querry = true;
                }
                if (right_querry)
                {
                    motherboard_search();
                }

                break;
            case 6:
                filtr_PowerSupply = new();
                if (QueryHelpers.ParseQuery(currenturi.Query).TryGetValue("standard", out var output11))
                {
                    filtr_PowerSupply.Standard = new List<string> { output11 }; right_querry = true;
                }
                if (QueryHelpers.ParseQuery(currenturi.Query).TryGetValue("certificate", out var output12))
                {
                    filtr_PowerSupply.Certificate = new List<string> { output12 }; right_querry = true;
                }
                if (right_querry)
                {
                    powersupply_search();
                }

                break;
            case 7:
                filtr_Radiator = new();
                if (QueryHelpers.ParseQuery(currenturi.Query).TryGetValue("type", out var output13))
                {
                    filtr_Radiator.Cooling_type = new List<string> { output13 }; right_querry = true;
                }
                if (QueryHelpers.ParseQuery(currenturi.Query).TryGetValue("socket", out var output14))
                {
                    filtr_Radiator.Socket = new List<string> { output14 }; right_querry = true;
                }
                if (right_querry)
                {
                    radiator_search();
                }

                break;
            case 8:
                filtr_Ram = new();
                if (QueryHelpers.ParseQuery(currenturi.Query).TryGetValue("type", out var output15))
                {
                    filtr_Ram.Memory_type = new List<string> { output15 }; right_querry = true;
                }
                if (QueryHelpers.ParseQuery(currenturi.Query).TryGetValue("gb", out var output16))
                {
                    filtr_Ram.Memory_size_full = new List<string> { output16 }; right_querry = true;
                }
                if (right_querry)
                {
                    ram_search();
                }

                break;
            default:
                break;
        }


    }

    private async void processor_search()
    {
        productList.changeprocessors(await SearchEngine.Selected_Processors(filtr_Processor,env));
    }
    private async void computercase_search()
    {
        productList.changecomputercase(await SearchEngine.Selected_ComputerCase(filtr_ComputerCase, env));
    }
    private async void disc_search()
    {
        productList.changedisc(await SearchEngine.Selected_Discs(filtr_Disc, env));
    }
    private async void graphiccard_search()
    {
        productList.changegraphiccard(await SearchEngine.Selected_GraphicCards(filtr_GraphicCard, env));
    }
    private async void motherboard_search()
    {
        productList.changemotherboard(await SearchEngine.Selected_Motherboards(filtr_Motherboard, env));
    }
    private async void powersupply_search()
    {
        productList.changepowersupply(await SearchEngine.Selected_PowerSupplies(filtr_PowerSupply, env));
    }
    private async void radiator_search()
    {
        productList.changeradiator(await SearchEngine.Selected_Radiators(filtr_Radiator, env));
    }
    private async void ram_search()
    {
        productList.changeram(await SearchEngine.Selected_Rams(filtr_Ram, env));
    }


    private List<string> convert_list_int_to_string(List<int> x)
    {
        return x.ConvertAll<string>(delegate (int i) { return i.ToString(); });
    }


#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IWebHostEnvironment env { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private DistinctService distinctService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NavigationManager NavigationManager { get; set; }
    }
}
#pragma warning restore 1591
