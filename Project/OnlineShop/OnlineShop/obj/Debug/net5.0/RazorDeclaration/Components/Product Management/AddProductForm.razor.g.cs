// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace OnlineShop.Components.Product_Management
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\Users\jarek\source\repos\OnlineShop\OnlineShop\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\jarek\source\repos\OnlineShop\OnlineShop\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\jarek\source\repos\OnlineShop\OnlineShop\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\jarek\source\repos\OnlineShop\OnlineShop\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\jarek\source\repos\OnlineShop\OnlineShop\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\jarek\source\repos\OnlineShop\OnlineShop\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\jarek\source\repos\OnlineShop\OnlineShop\_Imports.razor"
using Microsoft.AspNetCore.Components.Web.Virtualization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\jarek\source\repos\OnlineShop\OnlineShop\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Users\jarek\source\repos\OnlineShop\OnlineShop\_Imports.razor"
using OnlineShop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "C:\Users\jarek\source\repos\OnlineShop\OnlineShop\_Imports.razor"
using OnlineShop.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "C:\Users\jarek\source\repos\OnlineShop\OnlineShop\_Imports.razor"
using OnlineShop.Pages.Components;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "C:\Users\jarek\source\repos\OnlineShop\OnlineShop\_Imports.razor"
using Newtonsoft.Json;

#line default
#line hidden
#nullable disable
#nullable restore
#line 1 "C:\Users\jarek\source\repos\OnlineShop\OnlineShop\Components\Product Management\AddProductForm.razor"
using Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\jarek\source\repos\OnlineShop\OnlineShop\Components\Product Management\AddProductForm.razor"
using DataAccess;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\jarek\source\repos\OnlineShop\OnlineShop\Components\Product Management\AddProductForm.razor"
using System.IO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\jarek\source\repos\OnlineShop\OnlineShop\Components\Product Management\AddProductForm.razor"
using Microsoft.AspNetCore.Hosting;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\jarek\source\repos\OnlineShop\OnlineShop\Components\Product Management\AddProductForm.razor"
using Newtonsoft.Json.Linq;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\jarek\source\repos\OnlineShop\OnlineShop\Components\Product Management\AddProductForm.razor"
using OnlineShop.Services;

#line default
#line hidden
#nullable disable
    public partial class AddProductForm : ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 1296 "C:\Users\jarek\source\repos\OnlineShop\OnlineShop\Components\Product Management\AddProductForm.razor"
       
    [Parameter]
    public string Name { get; set; }
    [Parameter]
    public bool edit { get; set; }
    [Parameter]
    public int editindex { get; set; }

    [CascadingParameter] EditProductsForm editProducts { get; set; }
    [CascadingParameter] ProductManagement productManagement { get; set; }

    private Json_distinct json_Distinct { get; set; }
    private string PhotoSTR { get; set; }

    private Product<Processor> processor = new Product<Processor>();
    private Product<ComputerCase> computercase = new Product<ComputerCase>();
    private Product<Disc> disc = new Product<Disc>();
    private Product<Motherboard> motherboard = new Product<Motherboard>();
    private Product<GraphicCard> graphiccard = new Product<GraphicCard>();
    private Product<PowerSupply> Powersupply = new Product<PowerSupply>();
    private Product<Radiator> Radiator = new Product<Radiator>();
    private Product<Ram> ram = new Product<Ram>();

    private List<IBrowserFile> loadedFiles = new();

    protected async override void OnInitialized()
    {

        using (StreamReader r = new StreamReader($"..\\OnlineShop\\wwwroot\\json\\distinct.json"))
        {
            string json = r.ReadToEnd();
            json_Distinct = new Json_distinct();
            json_Distinct = JsonConvert.DeserializeObject<OnlineShop.Services.Json_distinct>(json);
        }

        _data = new SqlDataAccess();
        processor.Attributes = new Processor();
        computercase.Attributes = new ComputerCase();
        disc.Attributes = new Disc();
        motherboard.Attributes = new Motherboard();
        graphiccard.Attributes = new GraphicCard();
        Powersupply.Attributes = new PowerSupply();
        Radiator.Attributes = new Radiator();
        ram.Attributes = new Ram();


        if (edit)
        {
            switch (Name)
            {
                case "processors":
                    List<Product<Processor>> record_pro1 = await _data.LoadData<Product<Processor>, dynamic>("SELECT products.id,products.prName as Name,products.Price,products.Brand,products.Warranty from products where id=@prid", new { @prid = editindex });
                    List<Processor> record_pro2 = await _data.LoadData<Processor, dynamic>("select processors.Id,productID,PhotoSTR,Family,Processor_number,Socket,Arch,Frequency,Cores,Threads,Unlocked,Cache,Intergrated_graphic,Processor_graphic,Memory_types,Lithography,Tdp,TechnologiesSTR,Cooling_in_box,Code from Processors where productID=@prid", new { @prid = editindex });
                    processor = record_pro1[0];
                    processor.Attributes = record_pro2[0];
                    StateHasChanged();
                    break;

                case "discs":
                    List<Product<Disc>> record_dis1 = await _data.LoadData<Product<Disc>, dynamic>("SELECT products.id,products.prName as Name,products.Price,products.Brand,products.Warranty from products where id=@prid", new { @prid = editindex });
                    List<Disc> record_dis2 = await _data.LoadData<Disc, dynamic>("SELECT [Id] ,[productID] ,[PhotoSTR] ,[Destiny] ,[discType] as 'Type' ,[Capacity] ,[discFormat] as 'Format' ,[Interfaces] ,[Read_speed] ,[Write_speed] ,[Random_read_speed] ,[Random_write_speed] ,[Memory_type] ,[Reliability] ,[Radiator] ,[Additional_informationSTR] ,[AccessoriesSTR] ,[Color] ,[Width] ,[Heigth] ,[Length_] as 'Length' ,[Code] FROM Discs where productID=@prid", new { @prid = editindex });
                    disc = record_dis1[0];
                    disc.Attributes = record_dis2[0];
                    StateHasChanged();
                    break;

                case "computercases":
                    List<Product<ComputerCase>> record_case1 = await _data.LoadData<Product<ComputerCase>, dynamic>("SELECT products.id,products.prName as Name,products.Price,products.Brand,products.Warranty from products where id=@prid", new { @prid = editindex });
                    List<ComputerCase> record_case2 = await _data.LoadData<ComputerCase, dynamic>("SELECT [Id] ,[productID] ,[PhotoSTR] ,[caseType] as 'Type' ,[Motherboards_typeSTR] ,[Extension_cards] ,[Max_graphic_card_length] ,[MaterialsSTR] ,[Additional_informationSTR] ,[Side_panel] ,[Backlight] ,[Power_supply_type] ,[Space_for_discsSTR] ,[Max_height_of_cooling] ,[Max_fans] ,[Fans_typesSTR] ,[Water_cooling_optionsSTR] ,[Fans_installed] ,[Fans_types_installedSTR] ,[ButtonsSTR] ,[Front_panel_outputsSTR] ,[Color] ,[AccessoriesSTR] ,[Width] ,[Heigth] ,[Length_] as 'Length' ,[Weigth] FROM ComputerCases where productID=@prid", new { @prid = editindex });
                    computercase = record_case1[0];
                    computercase.Attributes = record_case2[0];
                    StateHasChanged();
                    break;

                case "graphiccards":
                    List<Product<GraphicCard>> record_gra1 = await _data.LoadData<Product<GraphicCard>, dynamic>("SELECT products.id,products.prName as Name,products.Price,products.Brand,products.Warranty from products where id=@prid", new { @prid = editindex });
                    List<GraphicCard> record_gra2 = await _data.LoadData<GraphicCard, dynamic>("SELECT [Id] ,[productID] ,[PhotoSTR] ,[Rtx] ,[Core_clock] ,[Graphics_processing] ,[Card_bus] ,[Memory_size] ,[Memory_type] ,[Memory_bus] ,[Cuda_cores] ,[Cooling] ,[OutputsSTR] ,[Graphic_apiSTR] ,[Power_connectors] ,[Recommended_psu] ,[Tdp] ,[Length_] as 'Length' ,[Width] ,[Heigth] ,[AccessoriesSTR] ,[Code] FROM GraphicCards where productID=@prid", new { @prid = editindex });
                    graphiccard = record_gra1[0];
                    graphiccard.Attributes = record_gra2[0];
                    StateHasChanged();
                    break;

                case "motherboards":
                    List<Product<Motherboard>> record_board1 = await _data.LoadData<Product<Motherboard>, dynamic>("SELECT products.id,products.prName as Name,products.Price,products.Brand,products.Warranty from products where id=@prid", new { @prid = editindex });
                    List<Motherboard> record_board2 = await _data.LoadData<Motherboard, dynamic>("SELECT [Id] ,[productID] ,[PhotoSTR] ,[Socket] ,[Chipset] ,[Arch_processSTR] ,[Memory_typesSTR] ,[Memory_types_ocSTR] ,[Memory_slots] ,[Memory_max_size] ,[Memory_channel] ,[Internal_connectionSTR] ,[Back_panel_portsSTR] ,[RaidSTR] ,[Multi_cards] ,[Can_handle_processor_card] ,[Audio] ,[Wireless_connection] ,[boardFormat] as 'Format' ,[Width] ,[Length_] as 'Length' ,[Code] FROM Motherboards where productID=@prid", new { @prid = editindex });
                    motherboard = record_board1[0];
                    motherboard.Attributes = record_board2[0];
                    StateHasChanged();
                    break;

                case "Powersupply":
                    List<Product<PowerSupply>> record_Power1 = await _data.LoadData<Product<PowerSupply>, dynamic>("SELECT products.id,products.prName as Name,products.Price,products.Brand,products.Warranty from products where id=@prid", new { @prid = editindex });
                    List<PowerSupply> record_Power2 = await _data.LoadData<PowerSupply, dynamic>("SELECT [Id] ,[productID] ,[PhotoSTR] ,[Power_] as 'Power' ,[Standard_] as 'Standard' ,[Efficiency] ,[Certificate_] as 'Certificate' ,[Cables_types] ,[Fan] ,[Pfc] ,[ConnectorsSTR] ,[SecuritySTR] ,[Additional_informationSTR] ,[Length_] as 'Length' ,[Width] ,[Heigth] ,[Color] FROM PowerSupply where productID=@prid", new { @prid = editindex });
                    Powersupply = record_Power1[0];
                    Powersupply.Attributes = record_Power2[0];
                    StateHasChanged();
                    break;

                case "Radiators":
                    List<Product<Radiator>> record_Radiator1 = await _data.LoadData<Product<Radiator>, dynamic>("SELECT products.id,products.prName as Name,products.Price,products.Brand,products.Warranty from products where id=@prid", new { @prid = editindex });
                    List<Radiator> record_Radiator2 = await _data.LoadData<Radiator, dynamic>("SELECT [Id] ,[productID] ,[PhotoSTR] ,[Cooling_type] ,[SocketsSTR] ,[FansSTR] ,[Materials] ,[Rps] ,[Bearing] ,[Max_dB] ,[Connectors] ,[Backlight] ,[Service_life] ,[Tdp] ,[Additional_informationSTR] ,[Heigth] ,[Width] ,[Length_] as 'Length' ,[Weight_] as 'Weight' ,[AccessoriesSTR] ,[Code] FROM Radiators where productID=@prid", new { @prid = editindex });
                    Radiator = record_Radiator1[0];
                    Radiator.Attributes = record_Radiator2[0];
                    StateHasChanged();
                    break;

                case "rams":
                    List<Product<Ram>> record_ram1 = await _data.LoadData<Product<Ram>, dynamic>("SELECT products.id,products.prName as Name,products.Price,products.Brand,products.Warranty from products where id=@prid", new { @prid = editindex });
                    List<Ram> record_ram2 = await _data.LoadData<Ram, dynamic>("SELECT [Id] ,[productID] ,[PhotoSTR] ,[Series] ,[Memory_type] ,[Memory_size_full] ,[Memory_size_single] ,[Items] ,[Frequency] ,[Cycle_latency] ,[Timings] ,[Tension] ,[Cooling] ,[Memory_ecc] ,[Memory_backlight] ,[Additional_information] ,[Color] FROM Rams where productID=@prid", new { @prid = editindex });
                    ram = record_ram1[0];
                    ram.Attributes = record_ram2[0];
                    break;

                default:
                    break;
            }
        }

        PhotoSTR = "";
    }

    private async Task AddProcessor()
    {
        if (edit)
        {
            string sql = "update products set prName = @prName, price = @Price,brand = @Brand,warranty = @Warranty where Id=@Id";
            await _data.Update(sql, new { @prName = processor.Name, @Price = processor.Price, @Brand = processor.Brand, @Warranty = processor.Warranty, @Id = processor.Id });
            string sql2 = "UPDATE Processors SET [photoSTR] = @PhotoSTR ,[family] = @Family ,[processor_number] = @Processor_number ,[socket] = @Socket ,[arch] = @Arch ,[frequency] = @Frequency ,[cores] = @Cores ,[threads] = @Threads ,[unlocked] = @Unlocked ,[cache] = @Cache ,[intergrated_graphic] = @Intergrated_graphic ,[processor_graphic] = @Processor_graphic ,[memory_types] = @Memory_types ,[lithography] = @Lithography ,[tdp] = @Tdp ,[technologiesSTR] = @TechnologiesSTR ,[cooling_in_box] = @Cooling_in_box ,[code] = @Code WHERE productID=@Id ";
            await _data.Update(sql2, new { @PhotoSTR = processor.Attributes.PhotoSTR, @Family = processor.Attributes.Family, @Processor_number = processor.Attributes.Processor_number, @Socket = processor.Attributes.Socket, @Arch = processor.Attributes.Arch, @Frequency = processor.Attributes.Frequency, @Cores = processor.Attributes.Cores, @Threads = processor.Attributes.Threads, @Unlocked = processor.Attributes.Unlocked, @Cache = processor.Attributes.Cache, @Intergrated_graphic = processor.Attributes.Intergrated_graphic, @Processor_graphic = processor.Attributes.Processor_graphic, @Memory_types = processor.Attributes.Memory_types, @Lithography = processor.Attributes.Lithography, @Tdp = processor.Attributes.TDP, @TechnologiesSTR = processor.Attributes.TechnologiesSTR, @Cooling_in_box = processor.Attributes.Cooling_in_box, @Code = processor.Attributes.Code, @Id = editindex });
            editProducts.processor = await LoadProductsToEdit.Loadprocessors();
            editProducts.changevalue();
        }
        else
        {
            string sql = "insert into products (prName,price,brand,warranty) values (@prName,@Price,@Brand,@Warranty) SELECT CAST(scope_identity() AS int)";
            List<int> id = await _data.LoadData<int, dynamic>(sql, new { prName = processor.Name, Price = processor.Price, Brand = processor.Brand, Warranty = processor.Warranty });

            processor.Attributes.Photo = getPhotos(id[0]);

            if (processor.Attributes.TechnologiesSTR is not null)
            {
                processor.Attributes.Technologies = convertInputTextAreaToProjectSyntax(processor.Attributes.TechnologiesSTR);
            }


            string sql2 = "insert into Processors (productID,photoSTR,family,processor_number,socket,arch,frequency,cores,threads,unlocked,cache,intergrated_graphic,processor_graphic,memory_types,lithography,tdp,technologiesSTR,cooling_in_box,code) values (@productID,@PhotoSTR,@Family,@Processor_number,@Socket,@Arch,@Frequency,@Cores,@Threads,@Unlocked,@Cache,@Intergrated_graphic,@Processor_graphic,@Memory_types,@Lithography,@Tdp,@TechnologiesSTR,@Cooling_in_box,@Code)";

            await _data.Update(sql2, new { @productID = id[0], @PhotoSTR = processor.Attributes.PhotoSTR, @Family = processor.Attributes.Family, @Processor_number = processor.Attributes.Processor_number, @Socket = processor.Attributes.Socket, @Arch = processor.Attributes.Arch, @Frequency = processor.Attributes.Frequency, @Cores = processor.Attributes.Cores, @Threads = processor.Attributes.Threads, @Unlocked = processor.Attributes.Unlocked, @Cache = processor.Attributes.Cache, @Intergrated_graphic = processor.Attributes.Intergrated_graphic, @Processor_graphic = processor.Attributes.Processor_graphic, @Memory_types = processor.Attributes.Memory_types, @Lithography = processor.Attributes.Lithography, @Tdp = processor.Attributes.TDP, @TechnologiesSTR = processor.Attributes.TechnologiesSTR, @Cooling_in_box = processor.Attributes.Cooling_in_box, @Code = processor.Attributes.Code });

            string sql3 = "insert into Stars ([productID],[rating],[opinions]) values (@productID,@rating,@opinions)";
            await _data.Update(sql3, new { @productID = id[0], @rating = 0, @opinions = 0 });

            await Load_photos_on_sever(id[0]);
            processor = new Product<Processor>();
            processor.Attributes = new Processor();
        }

        await json_Distinct.Laoddistinct();
        StateHasChanged();
    }

    private async Task AddComputerCase()
    {

        if (edit)
        {
            string sql = "update products set prName = @prName, price = @Price,brand = @Brand,warranty = @Warranty where Id=@Id";
            await _data.Update(sql, new { @prName = computercase.Name, @Price = computercase.Price, @Brand = computercase.Brand, @Warranty = computercase.Warranty, @Id = computercase.Id });
            string sql2 = "UPDATE ComputerCases SET [photoSTR] = @PhotoSTR ,[caseType] = @caseType ,[motherboards_typeSTR] = @Motherboards_typeSTR ,[extension_cards] = @Extension_cards ,[max_graphic_card_length] = @Max_graphic_card_length ,[materialsSTR] = @MaterialsSTR ,[additional_informationSTR] = @Additional_informationSTR ,[side_panel] = @Side_panel ,[backlight] = @Backlight ,[power_supply_type] = @Power_supply_type ,[space_for_discsSTR] = @Space_for_discsSTR ,[max_height_of_cooling] = @Max_height_of_cooling ,[max_fans] = @Max_fans ,[fans_typesSTR] = @Fans_typesSTR ,[water_cooling_optionsSTR] = @Water_cooling_optionsSTR ,[fans_installed] = @Fans_installed ,[fans_types_installedSTR] = @Fans_types_installedSTR ,[buttonsSTR] = @ButtonsSTR ,[front_panel_outputsSTR] = @Front_panel_outputsSTR ,[color] = @Color ,[accessoriesSTR] = @AccessoriesSTR ,[width] = @Width ,[heigth] = @Heigth ,[length_] = @Length_ ,[weigth] = @Weigth WHERE productID=@Id ";
            await _data.Update(sql2, new { @PhotoSTR = computercase.Attributes.PhotoSTR, @caseType = computercase.Attributes.Type, @Motherboards_typeSTR = computercase.Attributes.Motherboards_typeSTR, @Extension_cards = computercase.Attributes.Extension_cards, @Max_graphic_card_length = computercase.Attributes.Max_graphic_card_length, @MaterialsSTR = computercase.Attributes.MaterialsSTR, @Additional_informationSTR = computercase.Attributes.Additional_informationSTR, @Side_panel = computercase.Attributes.Side_panel, @Backlight = computercase.Attributes.Backlight, @Power_supply_type = computercase.Attributes.Power_supply_type, @Space_for_discsSTR = computercase.Attributes.Space_for_discsSTR, @Max_height_of_cooling = computercase.Attributes.Max_height_of_cooling, @Max_fans = computercase.Attributes.Max_fans, @Fans_typesSTR = computercase.Attributes.Fans_typesSTR, @Water_cooling_optionsSTR = computercase.Attributes.Water_cooling_optionsSTR, @Fans_installed = computercase.Attributes.Fans_installed, @Fans_types_installedSTR = computercase.Attributes.Fans_types_installedSTR, @ButtonsSTR = computercase.Attributes.ButtonsSTR, @Front_panel_outputsSTR = computercase.Attributes.Front_panel_outputsSTR, @Color = computercase.Attributes.Color, @AccessoriesSTR = computercase.Attributes.AccessoriesSTR, @Width = computercase.Attributes.Width, @Heigth = computercase.Attributes.Heigth, @Length_ = computercase.Attributes.Length, @Weigth = computercase.Attributes.Weigth, @Id = editindex });
            editProducts.computercase = await LoadProductsToEdit.Loadcomputercases();
            editProducts.changevalue();
        }
        else
        {
            string sql = "insert into products (prName,price,brand,warranty) values (@prName,@Price,@Brand,@Warranty) SELECT CAST(scope_identity() AS int)";
            List<int> id = await _data.LoadData<int, dynamic>(sql, new { prName = computercase.Name, Price = computercase.Price, Brand = computercase.Brand, Warranty = computercase.Warranty });

            computercase.Attributes.Photo = getPhotos(id[0]);
            computercase.Attributes.Motherboards_type = convertInputTextAreaToProjectSyntax(computercase.Attributes.Motherboards_typeSTR);
            computercase.Attributes.Materials = convertInputTextAreaToProjectSyntax(computercase.Attributes.MaterialsSTR);
            computercase.Attributes.Additional_information = convertInputTextAreaToProjectSyntax(computercase.Attributes.Additional_informationSTR);
            computercase.Attributes.Space_for_discs = convertInputTextAreaToProjectSyntax(computercase.Attributes.Space_for_discsSTR);
            computercase.Attributes.Fans_types = convertInputTextAreaToProjectSyntax(computercase.Attributes.Fans_typesSTR);
            computercase.Attributes.Water_cooling_options = convertInputTextAreaToProjectSyntax(computercase.Attributes.Water_cooling_optionsSTR);
            computercase.Attributes.Fans_types_installed = convertInputTextAreaToProjectSyntax(computercase.Attributes.Fans_types_installedSTR);
            computercase.Attributes.Buttons = convertInputTextAreaToProjectSyntax(computercase.Attributes.ButtonsSTR);
            computercase.Attributes.Front_panel_outputs = convertInputTextAreaToProjectSyntax(computercase.Attributes.Front_panel_outputsSTR);
            computercase.Attributes.Accessories = convertInputTextAreaToProjectSyntax(computercase.Attributes.AccessoriesSTR);

            string sql2 = "insert into ComputerCases (productID,photoSTR,caseType,motherboards_typeSTR,extension_cards,max_graphic_card_length,materialsSTR,additional_informationSTR,side_panel,backlight,power_supply_type,space_for_discsSTR,max_height_of_cooling,max_fans,fans_typesSTR,water_cooling_optionsSTR,fans_installed,fans_types_installedSTR,buttonsSTR,front_panel_outputsSTR,color,accessoriesSTR,width,heigth,length_,weigth) values (@productID,@PhotoSTR,@caseType,@Motherboards_typeSTR,@Extension_cards,@Max_graphic_card_length,@MaterialsSTR,@Additional_informationSTR,@Side_panel,@Backlight,@Power_supply_type,@Space_for_discsSTR,@Max_height_of_cooling,@Max_fans,@Fans_typesSTR,@Water_cooling_optionsSTR,@Fans_installed,@Fans_types_installedSTR,@ButtonsSTR,@Front_panel_outputsSTR,@Color,@AccessoriesSTR,@Width,@Heigth,@Length_,@Weigth)";

            await _data.Update(sql2, new { @productID = id[0], @PhotoSTR = computercase.Attributes.PhotoSTR, @caseType = computercase.Attributes.Type, @Motherboards_typeSTR = computercase.Attributes.Motherboards_typeSTR, @Extension_cards = computercase.Attributes.Extension_cards, @Max_graphic_card_length = computercase.Attributes.Max_graphic_card_length, @MaterialsSTR = computercase.Attributes.MaterialsSTR, @Additional_informationSTR = computercase.Attributes.Additional_informationSTR, @Side_panel = computercase.Attributes.Side_panel, @Backlight = computercase.Attributes.Backlight, @Power_supply_type = computercase.Attributes.Power_supply_type, @Space_for_discsSTR = computercase.Attributes.Space_for_discsSTR, @Max_height_of_cooling = computercase.Attributes.Max_height_of_cooling, @Max_fans = computercase.Attributes.Max_fans, @Fans_typesSTR = computercase.Attributes.Fans_typesSTR, @Water_cooling_optionsSTR = computercase.Attributes.Water_cooling_optionsSTR, @Fans_installed = computercase.Attributes.Fans_installed, @Fans_types_installedSTR = computercase.Attributes.Fans_types_installedSTR, @ButtonsSTR = computercase.Attributes.ButtonsSTR, @Front_panel_outputsSTR = computercase.Attributes.Front_panel_outputsSTR, @Color = computercase.Attributes.Color, @AccessoriesSTR = computercase.Attributes.AccessoriesSTR, @Width = computercase.Attributes.Width, @Heigth = computercase.Attributes.Heigth, @Length_ = computercase.Attributes.Length, @Weigth = computercase.Attributes.Weigth });
            string sql3 = "insert into Stars ([productID],[rating],[opinions]) values (@productID,@rating,@opinions)";
            await _data.Update(sql3, new { @productID = id[0], @rating = 0, @opinions = 0 });

            await Load_photos_on_sever(id[0]);
            computercase = new Product<ComputerCase>();
            computercase.Attributes = new ComputerCase();
        }

        await json_Distinct.Laoddistinct();
        StateHasChanged();
    }

    private async Task AddDisc()
    {
        if (edit)
        {
            string sql = "update products set prName = @prName, price = @Price,brand = @Brand,warranty = @Warranty where Id=@Id";
            await _data.Update(sql, new { @prName = disc.Name, @Price = disc.Price, @Brand = disc.Brand, @Warranty = disc.Warranty, @Id = disc.Id });
            string sql2 = "UPDATE Discs SET [photoSTR] = @PhotoSTR ,[destiny] = @Destiny ,[discType] = @discType ,[capacity] = @Capacity ,[discFormat] = @discFormat ,[interfaces] = @Interfaces ,[read_speed] = @Read_speed ,[write_speed] = @Write_speed ,[random_read_speed] = @Random_read_speed ,[random_write_speed] = @Random_write_speed ,[memory_type] = @Memory_type ,[reliability] = @Reliability ,[radiator] = @Radiator ,[additional_informationSTR] = @Additional_informationSTR ,[accessoriesSTR] = @AccessoriesSTR ,[color] = @Color ,[width] = @Width ,[heigth] = @Heigth ,[length_] = @Length_ ,[code] = @Code WHERE productID=@Id ";
            await _data.Update(sql2, new { @PhotoSTR = disc.Attributes.PhotoSTR, @Destiny = disc.Attributes.Destiny, @discType = disc.Attributes.Type, @Capacity = disc.Attributes.Capacity, @discFormat = disc.Attributes.Format, @Interfaces = disc.Attributes.Interfaces, @Read_speed = disc.Attributes.Read_speed, @Write_speed = disc.Attributes.Write_speed, @Random_read_speed = disc.Attributes.Random_read_speed, @Random_write_speed = disc.Attributes.Random_write_speed, @Memory_type = disc.Attributes.Memory_type, @Reliability = disc.Attributes.Reliability, @Radiator = disc.Attributes.Radiator, @Additional_informationSTR = disc.Attributes.Additional_informationSTR, @AccessoriesSTR = disc.Attributes.AccessoriesSTR, @Color = disc.Attributes.Color, @Width = disc.Attributes.Width, @Heigth = disc.Attributes.Heigth, @Length_ = disc.Attributes.Length, @Code = disc.Attributes.Code, @Id = editindex });
            editProducts.disc = await LoadProductsToEdit.Loaddiscs();
            editProducts.changevalue();
        }
        else
        {
            string sql = "insert into products (prName,price,brand,warranty) values (@prName,@Price,@Brand,@Warranty) SELECT CAST(scope_identity() AS int)";
            List<int> id = await _data.LoadData<int, dynamic>(sql, new { prName = disc.Name, Price = disc.Price, Brand = disc.Brand, Warranty = disc.Warranty });

            disc.Attributes.Photo = getPhotos(id[0]);
            disc.Attributes.Additional_information = convertInputTextAreaToProjectSyntax(disc.Attributes.Additional_informationSTR);
            disc.Attributes.Accessories = convertInputTextAreaToProjectSyntax(disc.Attributes.AccessoriesSTR);

            string sql2 = "insert into Discs (productID,photoSTR,destiny,discType,capacity,discFormat,interfaces,read_speed,write_speed,random_read_speed,random_write_speed,memory_type,reliability,radiator,additional_informationSTR,accessoriesSTR,color,width,heigth,length_,code) values (@productID,@PhotoSTR,@Destiny,@discType,@Capacity,@discFormat,@Interfaces,@Read_speed,@Write_speed,@Random_read_speed,@Random_write_speed,@Memory_type,@Reliability,@Radiator,@Additional_informationSTR,@AccessoriesSTR,@Color,@Width,@Heigth,@Length_,@Code)";

            await _data.Update(sql2, new { @productID = id[0], @PhotoSTR = disc.Attributes.PhotoSTR, @Destiny = disc.Attributes.Destiny, @discType = disc.Attributes.Type, @Capacity = disc.Attributes.Capacity, @discFormat = disc.Attributes.Format, @Interfaces = disc.Attributes.Interfaces, @Read_speed = disc.Attributes.Read_speed, @Write_speed = disc.Attributes.Write_speed, @Random_read_speed = disc.Attributes.Random_read_speed, @Random_write_speed = disc.Attributes.Random_write_speed, @Memory_type = disc.Attributes.Memory_type, @Reliability = disc.Attributes.Reliability, @Radiator = disc.Attributes.Radiator, @Additional_informationSTR = disc.Attributes.Additional_informationSTR, @AccessoriesSTR = disc.Attributes.AccessoriesSTR, @Color = disc.Attributes.Color, @Width = disc.Attributes.Width, @Heigth = disc.Attributes.Heigth, @Length_ = disc.Attributes.Length, @Code = disc.Attributes.Code });
            string sql3 = "insert into Stars ([productID],[rating],[opinions]) values (@productID,@rating,@opinions)";
            await _data.Update(sql3, new { @productID = id[0], @rating = 0, @opinions = 0 });

            await Load_photos_on_sever(id[0]);
            disc = new Product<Disc>();
            disc.Attributes = new Disc();
        }

        await json_Distinct.Laoddistinct();
        StateHasChanged();
    }

    private async Task AddGraphicCard()
    {
        if (edit)
        {
            string sql = "update products set prName = @prName, price = @Price,brand = @Brand,warranty = @Warranty where Id=@Id";
            await _data.Update(sql, new { @prName = graphiccard.Name, @Price = graphiccard.Price, @Brand = graphiccard.Brand, @Warranty = graphiccard.Warranty, @Id = graphiccard.Id });
            string sql2 = "UPDATE GraphicCards SET [photoSTR] = @PhotoSTR ,[rtx] = @Rtx ,[core_clock] = @Core_clock ,[graphics_processing] = @Graphics_processing ,[card_bus] = @Card_bus ,[memory_size] = @Memory_size ,[memory_type] = @Memory_type ,[memory_bus] = @Memory_bus ,[cuda_cores] = @Cuda_cores ,[cooling] = @Cooling ,[outputsSTR] = @OutputsSTR ,[graphic_apiSTR] = @Graphic_apiSTR ,[power_connectors] = @Power_connectors ,[recommended_psu] = @Recommended_psu ,[tdp] = @Tdp ,[length_] = @Length_ ,[width] = @Width ,[heigth] = @Heigth ,[accessoriesSTR] = @AccessoriesSTR ,[code] = @Code WHERE productID=@Id ";
            await _data.Update(sql2, new { @PhotoSTR = graphiccard.Attributes.PhotoSTR, @Rtx = graphiccard.Attributes.Rtx, @Core_clock = graphiccard.Attributes.Core_clock, @Graphics_processing = graphiccard.Attributes.Graphics_processing, @Card_bus = graphiccard.Attributes.Card_bus, @Memory_size = graphiccard.Attributes.Memory_size, @Memory_type = graphiccard.Attributes.Memory_type, @Memory_bus = graphiccard.Attributes.Memory_bus, @Cuda_cores = graphiccard.Attributes.Cuda_cores, @Cooling = graphiccard.Attributes.Cooling, @OutputsSTR = graphiccard.Attributes.OutputsSTR, @Graphic_apiSTR = graphiccard.Attributes.Graphic_apiSTR, @Power_connectors = graphiccard.Attributes.Power_connectors, @Recommended_psu = graphiccard.Attributes.Recommended_psu, @Tdp = graphiccard.Attributes.Tdp, @Length_ = graphiccard.Attributes.Length, @Width = graphiccard.Attributes.Width, @Heigth = graphiccard.Attributes.Heigth, @AccessoriesSTR = graphiccard.Attributes.AccessoriesSTR, @Code = graphiccard.Attributes.Code, @Id = editindex });
            editProducts.graphiccard = await LoadProductsToEdit.Loadgraphiccards();
            editProducts.changevalue();
        }
        else
        {

            string sql = "insert into products (prName,price,brand,warranty) values (@prName,@Price,@Brand,@Warranty) SELECT CAST(scope_identity() AS int)";
            List<int> id = await _data.LoadData<int, dynamic>(sql, new { prName = graphiccard.Name, Price = graphiccard.Price, Brand = graphiccard.Brand, Warranty = graphiccard.Warranty });

            graphiccard.Attributes.Photo = getPhotos(id[0]);

            graphiccard.Attributes.Outputs = convertInputTextAreaToProjectSyntax(graphiccard.Attributes.OutputsSTR);
            graphiccard.Attributes.Graphic_api = convertInputTextAreaToProjectSyntax(graphiccard.Attributes.Graphic_apiSTR);
            graphiccard.Attributes.Accessories = convertInputTextAreaToProjectSyntax(graphiccard.Attributes.AccessoriesSTR);

            string sql2 = "insert into GraphicCards (productID,photoSTR,rtx,core_clock,graphics_processing,card_bus,memory_size,memory_type,memory_bus,cuda_cores,cooling,outputsSTR,graphic_apiSTR,power_connectors,recommended_psu,tdp,length_,width,heigth,accessoriesSTR,code) values (@productID,@PhotoSTR,@Rtx,@Core_clock,@Graphics_processing,@Card_bus,@Memory_size,@Memory_type,@Memory_bus,@Cuda_cores,@Cooling,@OutputsSTR,@Graphic_apiSTR,@Power_connectors,@Recommended_psu,@Tdp,@Length_,@Width,@Heigth,@AccessoriesSTR,@Code)";

            await _data.Update(sql2, new { @productID = id[0], @PhotoSTR = graphiccard.Attributes.PhotoSTR, @Rtx = graphiccard.Attributes.Rtx, @Core_clock = graphiccard.Attributes.Core_clock, @Graphics_processing = graphiccard.Attributes.Graphics_processing, @Card_bus = graphiccard.Attributes.Card_bus, @Memory_size = graphiccard.Attributes.Memory_size, @Memory_type = graphiccard.Attributes.Memory_type, @Memory_bus = graphiccard.Attributes.Memory_bus, @Cuda_cores = graphiccard.Attributes.Cuda_cores, @Cooling = graphiccard.Attributes.Cooling, @OutputsSTR = graphiccard.Attributes.OutputsSTR, @Graphic_apiSTR = graphiccard.Attributes.Graphic_apiSTR, @Power_connectors = graphiccard.Attributes.Power_connectors, @Recommended_psu = graphiccard.Attributes.Recommended_psu, @Tdp = graphiccard.Attributes.Tdp, @Length_ = graphiccard.Attributes.Length, @Width = graphiccard.Attributes.Width, @Heigth = graphiccard.Attributes.Heigth, @AccessoriesSTR = graphiccard.Attributes.AccessoriesSTR, @Code = graphiccard.Attributes.Code });
            string sql3 = "insert into Stars ([productID],[rating],[opinions]) values (@productID,@rating,@opinions)";
            await _data.Update(sql3, new { @productID = id[0], @rating = 0, @opinions = 0 });
            await Load_photos_on_sever(id[0]);
            graphiccard = new Product<GraphicCard>();
            graphiccard.Attributes = new GraphicCard();
        }

        await json_Distinct.Laoddistinct();
        StateHasChanged();
    }

    private async Task AddMotherboard()
    {

        if (edit)
        {
            string sql = "update products set prName = @prName, price = @Price,brand = @Brand,warranty = @Warranty where Id=@Id";
            await _data.Update(sql, new { @prName = motherboard.Name, @Price = motherboard.Price, @Brand = motherboard.Brand, @Warranty = motherboard.Warranty, @Id = motherboard.Id });
            string sql2 = "UPDATE Motherboards SET [photoSTR] = @PhotoSTR ,[socket] = @Socket ,[chipset] = @Chipset ,[arch_processSTR] = @Arch_processSTR ,[memory_typesSTR] = @Memory_typesSTR ,[memory_types_ocSTR] = @Memory_types_ocSTR ,[memory_slots] = @Memory_slots ,[memory_max_size] = @Memory_max_size ,[memory_channel] = @Memory_channel ,[internal_connectionSTR] = @Internal_connectionSTR ,[back_panel_portsSTR] = @Back_panel_portsSTR ,[raidSTR] = @RaidSTR ,[multi_cards] = @Multi_cards ,[can_handle_processor_card] = @Can_handle_processor_card ,[audio] = @Audio ,[wireless_connection] = @Wireless_connection ,[boardformat] = @boardFormat ,[width] = @Width ,[length_] = @Length_ ,[code] = @Code WHERE productID=@Id ";
            await _data.Update(sql2, new { @PhotoSTR = motherboard.Attributes.PhotoSTR, @Socket = motherboard.Attributes.Socket, @Chipset = motherboard.Attributes.Chipset, @Arch_processSTR = motherboard.Attributes.Arch_processSTR, @Memory_typesSTR = motherboard.Attributes.Memory_typesSTR, @Memory_types_ocSTR = motherboard.Attributes.Memory_types_ocSTR, @Memory_slots = motherboard.Attributes.Memory_slots, @Memory_max_size = motherboard.Attributes.Memory_max_size, @Memory_channel = motherboard.Attributes.Memory_channel, @Internal_connectionSTR = motherboard.Attributes.Internal_connectionSTR, @Back_panel_portsSTR = motherboard.Attributes.Back_panel_portsSTR, @RaidSTR = motherboard.Attributes.RaidSTR, @Multi_cards = motherboard.Attributes.Multi_cards, @Can_handle_processor_card = motherboard.Attributes.Can_handle_processor_card, @Audio = motherboard.Attributes.Audio, @Wireless_connection = motherboard.Attributes.Wireless_connection, @boardFormat = motherboard.Attributes.Format, @Width = motherboard.Attributes.Width, @Length_ = motherboard.Attributes.Length, @Code = motherboard.Attributes.Code, @Id = editindex });
            editProducts.motherboard = await LoadProductsToEdit.Loadmotherboards();
            editProducts.changevalue();
        }
        else
        {
            string sql = "insert into products (prName,price,brand,warranty) values (@prName,@Price,@Brand,@Warranty) SELECT CAST(scope_identity() AS int)";
            List<int> id = await _data.LoadData<int, dynamic>(sql, new { prName = motherboard.Name, Price = motherboard.Price, Brand = motherboard.Brand, Warranty = motherboard.Warranty });

            motherboard.Attributes.Photo = getPhotos(id[0]);

            motherboard.Attributes.Arch_process = convertInputTextAreaToProjectSyntax(motherboard.Attributes.Arch_processSTR);
            motherboard.Attributes.Memory_types = convertInputTextAreaToProjectSyntax(motherboard.Attributes.Memory_typesSTR);
            motherboard.Attributes.Memory_types_oc = convertInputTextAreaToProjectSyntax(motherboard.Attributes.Memory_types_ocSTR);
            motherboard.Attributes.Internal_connection = convertInputTextAreaToProjectSyntax(motherboard.Attributes.Internal_connectionSTR);
            motherboard.Attributes.Back_panel_ports = convertInputTextAreaToProjectSyntax(motherboard.Attributes.Back_panel_portsSTR);

            string sql2 = "insert into Motherboards (productID,photoSTR,socket,chipset,arch_processSTR,memory_typesSTR,memory_types_ocSTR,memory_slots,memory_max_size,memory_channel,internal_connectionSTR,back_panel_portsSTR,raidSTR,multi_cards,can_handle_processor_card,audio,wireless_connection,boardFormat,width,length_,code) values (@productID,@PhotoSTR,@Socket,@Chipset,@Arch_processSTR,@Memory_typesSTR,@Memory_types_ocSTR,@Memory_slots,@Memory_max_size,@Memory_channel,@Internal_connectionSTR,@Back_panel_portsSTR,@RaidSTR,@Multi_cards,@Can_handle_processor_card,@Audio,@Wireless_connection,@boardFormat,@Width,@Length_,@Code)";

            await _data.Update(sql2, new { @productID = id[0], @PhotoSTR = motherboard.Attributes.PhotoSTR, @Socket = motherboard.Attributes.Socket, @Chipset = motherboard.Attributes.Chipset, @Arch_processSTR = motherboard.Attributes.Arch_processSTR, @Memory_typesSTR = motherboard.Attributes.Memory_typesSTR, @Memory_types_ocSTR = motherboard.Attributes.Memory_types_ocSTR, @Memory_slots = motherboard.Attributes.Memory_slots, @Memory_max_size = motherboard.Attributes.Memory_max_size, @Memory_channel = motherboard.Attributes.Memory_channel, @Internal_connectionSTR = motherboard.Attributes.Internal_connectionSTR, @Back_panel_portsSTR = motherboard.Attributes.Back_panel_portsSTR, @RaidSTR = motherboard.Attributes.RaidSTR, @Multi_cards = motherboard.Attributes.Multi_cards, @Can_handle_processor_card = motherboard.Attributes.Can_handle_processor_card, @Audio = motherboard.Attributes.Audio, @Wireless_connection = motherboard.Attributes.Wireless_connection, @boardFormat = motherboard.Attributes.Format, @Width = motherboard.Attributes.Width, @Length_ = motherboard.Attributes.Length, @Code = motherboard.Attributes.Code });
            string sql3 = "insert into Stars ([productID],[rating],[opinions]) values (@productID,@rating,@opinions)";
            await _data.Update(sql3, new { @productID = id[0], @rating = 0, @opinions = 0 });
            await Load_photos_on_sever(id[0]);
            motherboard = new Product<Motherboard>();
            motherboard.Attributes = new Motherboard();
        }

        await json_Distinct.Laoddistinct();
        StateHasChanged();
    }

    private async Task AddPowerSupply()
    {
        if (edit)
        {
            string sql = "update products set prName = @prName, price = @Price,brand = @Brand,warranty = @Warranty where Id=@Id";
            await _data.Update(sql, new { @prName = Powersupply.Name, @Price = Powersupply.Price, @Brand = Powersupply.Brand, @Warranty = Powersupply.Warranty, @Id = Powersupply.Id });
            string sql2 = "UPDATE PowerSupply SET [photoSTR] = @PhotoSTR ,[power_] = @Power_ ,[standard_] = @Standard_ ,[efficiency] = @Efficiency ,[certificate_] = @Certificate_ ,[cables_types] = @Cables_types ,[fan] = @Fan ,[pfc] = @Pfc ,[connectorsSTR] = @ConnectorsSTR ,[securitySTR] = @SecuritySTR ,[additional_informationSTR] = @Additional_informationSTR ,[length_] = @Length_ ,[width] = @Width ,[heigth] = @Heigth ,[color] = @Color WHERE productID=@Id ";
            await _data.Update(sql2, new { @PhotoSTR = Powersupply.Attributes.PhotoSTR, @Power_ = Powersupply.Attributes.Power, @Standard_ = Powersupply.Attributes.Standard, @Efficiency = Powersupply.Attributes.Efficiency, @Certificate_ = Powersupply.Attributes.Certificate, @Cables_types = Powersupply.Attributes.Cables_types, @Fan = Powersupply.Attributes.Fan, @Pfc = Powersupply.Attributes.Pfc, @ConnectorsSTR = Powersupply.Attributes.ConnectorsSTR, @SecuritySTR = Powersupply.Attributes.SecuritySTR, @Additional_informationSTR = Powersupply.Attributes.Additional_informationSTR, @Length_ = Powersupply.Attributes.Length, @Width = Powersupply.Attributes.Width, @Heigth = Powersupply.Attributes.Heigth, @Color = Powersupply.Attributes.Color, @Id = editindex });
            editProducts.powersupply = await LoadProductsToEdit.Loadpowersupplies();
            editProducts.changevalue();
        }
        else
        {
            string sql = "insert into products (prName,price,brand,warranty) values (@prName,@Price,@Brand,@Warranty) SELECT CAST(scope_identity() AS int)";
            List<int> id = await _data.LoadData<int, dynamic>(sql, new { prName = Powersupply.Name, Price = Powersupply.Price, Brand = Powersupply.Brand, Warranty = Powersupply.Warranty });

            Powersupply.Attributes.Photo = getPhotos(id[0]);

            Powersupply.Attributes.Connectors = convertInputTextAreaToProjectSyntax(Powersupply.Attributes.ConnectorsSTR);
            Powersupply.Attributes.Security = convertInputTextAreaToProjectSyntax(Powersupply.Attributes.SecuritySTR);
            Powersupply.Attributes.Additional_information = convertInputTextAreaToProjectSyntax(Powersupply.Attributes.Additional_informationSTR);

            string sql2 = "insert into PowerSupply (productID,photoSTR,power_,standard_,efficiency,certificate_,cables_types,fan,pfc,connectorsSTR,securitySTR,additional_informationSTR,length_,width,heigth,color) values (@productID,@PhotoSTR,@Power_,@Standard_,@Efficiency,@Certificate_,@Cables_types,@Fan,@Pfc,@ConnectorsSTR,@SecuritySTR,@Additional_informationSTR,@Length_,@Width,@Heigth,@Color)";

            await _data.Update(sql2, new { @productID = id[0], @PhotoSTR = Powersupply.Attributes.PhotoSTR, @Power_ = Powersupply.Attributes.Power, @Standard_ = Powersupply.Attributes.Standard, @Efficiency = Powersupply.Attributes.Efficiency, @Certificate_ = Powersupply.Attributes.Certificate, @Cables_types = Powersupply.Attributes.Cables_types, @Fan = Powersupply.Attributes.Fan, @Pfc = Powersupply.Attributes.Pfc, @ConnectorsSTR = Powersupply.Attributes.ConnectorsSTR, @SecuritySTR = Powersupply.Attributes.SecuritySTR, @Additional_informationSTR = Powersupply.Attributes.Additional_informationSTR, @Length_ = Powersupply.Attributes.Length, @Width = Powersupply.Attributes.Width, @Heigth = Powersupply.Attributes.Heigth, @Color = Powersupply.Attributes.Color });
            string sql3 = "insert into Stars ([productID],[rating],[opinions]) values (@productID,@rating,@opinions)";
            await _data.Update(sql3, new { @productID = id[0], @rating = 0, @opinions = 0 });
            await Load_photos_on_sever(id[0]);
            Powersupply = new Product<PowerSupply>();
            Powersupply.Attributes = new PowerSupply();
        }

        await json_Distinct.Laoddistinct();
        StateHasChanged();
    }

    private async Task AddRadiator()
    {
        if (edit)
        {
            string sql = "update products set prName = @prName, price = @Price,brand = @Brand,warranty = @Warranty where Id=@Id";
            await _data.Update(sql, new { @prName = Radiator.Name, @Price = Radiator.Price, @Brand = Radiator.Brand, @Warranty = Radiator.Warranty, @Id = Radiator.Id });
            string sql2 = "UPDATE Radiators SET [photoSTR] = @PhotoSTR ,[cooling_type] = @Cooling_type ,[socketsSTR] = @SocketsSTR ,[fansSTR] = @FansSTR ,[materials] = @Materials ,[rps] = @Rps ,[bearing] = @Bearing ,[max_dB] = @Max_dB ,[connectors] = @Connectors ,[backlight] = @Backlight ,[service_life] = @Service_life ,[tdp] = @dp ,[additional_informationSTR] = @Additional_informationSTR ,[heigth] = @Heigth ,[width] = @Width ,[length_] = @Length_ ,[weight_] = @Weight_ ,[accessoriesSTR] = @AccessoriesSTR ,[code] = @Code WHERE productID=@Id  ";
            await _data.Update(sql2, new { @PhotoSTR = Radiator.Attributes.PhotoSTR, @Cooling_type = Radiator.Attributes.Cooling_type, @SocketsSTR = Radiator.Attributes.SocketsSTR, @FansSTR = Radiator.Attributes.FansSTR, @Materials = Radiator.Attributes.Materials, @Rps = Radiator.Attributes.Rps, @Bearing = Radiator.Attributes.Bearing, @Max_dB = Radiator.Attributes.Max_dB, @Connectors = Radiator.Attributes.Connectors, @Backlight = Radiator.Attributes.Backlight, @Service_life = Radiator.Attributes.Service_life, @Tdp = Radiator.Attributes.Tdp, @Additional_informationSTR = Radiator.Attributes.Additional_informationSTR, @Heigth = Radiator.Attributes.Heigth, @Width = Radiator.Attributes.Width, @Length_ = Radiator.Attributes.Length, @Weight_ = Radiator.Attributes.Weight, @AccessoriesSTR = Radiator.Attributes.AccessoriesSTR, @Code = Radiator.Attributes.Code, @Id = editindex });
            editProducts.radiator = await LoadProductsToEdit.Loadradiators();
            editProducts.changevalue();
        }
        else
        {
            string sql = "insert into products (prName,price,brand,warranty) values (@prName,@Price,@Brand,@Warranty) SELECT CAST(scope_identity() AS int)";
            List<int> id = await _data.LoadData<int, dynamic>(sql, new { prName = Radiator.Name, Price = Radiator.Price, Brand = Radiator.Brand, Warranty = Radiator.Warranty });

            Radiator.Attributes.Photo = getPhotos(id[0]);

            Radiator.Attributes.Sockets = convertInputTextAreaToProjectSyntax(Radiator.Attributes.SocketsSTR);
            Radiator.Attributes.Fans = convertInputTextAreaToProjectSyntax(Radiator.Attributes.FansSTR);
            Radiator.Attributes.Additional_information = convertInputTextAreaToProjectSyntax(Radiator.Attributes.Additional_informationSTR);
            Radiator.Attributes.Accessories = convertInputTextAreaToProjectSyntax(Radiator.Attributes.AccessoriesSTR);

            string sql2 = "insert into Radiators (productID,photoSTR,cooling_type,socketsSTR,fansSTR,materials,rps,bearing,max_dB,connectors,backlight,service_life,tdp,additional_informationSTR,heigth,width,length_,weight_,accessoriesSTR,code) values (@productID,@PhotoSTR,@Cooling_type,@SocketsSTR,@FansSTR,@Materials,@Rps,@Bearing,@Max_dB,@Connectors,@Backlight,@Service_life,@Tdp,@Additional_informationSTR,@Heigth,@Width,@Length_,@Weight_,@AccessoriesSTR,@Code)";

            await _data.Update(sql2, new { @productID = id[0], @PhotoSTR = Radiator.Attributes.PhotoSTR, @Cooling_type = Radiator.Attributes.Cooling_type, @SocketsSTR = Radiator.Attributes.SocketsSTR, @FansSTR = Radiator.Attributes.FansSTR, @Materials = Radiator.Attributes.Materials, @Rps = Radiator.Attributes.Rps, @Bearing = Radiator.Attributes.Bearing, @Max_dB = Radiator.Attributes.Max_dB, @Connectors = Radiator.Attributes.Connectors, @Backlight = Radiator.Attributes.Backlight, @Service_life = Radiator.Attributes.Service_life, @Tdp = Radiator.Attributes.Tdp, @Additional_informationSTR = Radiator.Attributes.Additional_informationSTR, @Heigth = Radiator.Attributes.Heigth, @Width = Radiator.Attributes.Width, @Length_ = Radiator.Attributes.Length, @Weight_ = Radiator.Attributes.Weight, @AccessoriesSTR = Radiator.Attributes.AccessoriesSTR, @Code = Radiator.Attributes.Code });
            string sql3 = "insert into Stars ([productID],[rating],[opinions]) values (@productID,@rating,@opinions)";
            await _data.Update(sql3, new { @productID = id[0], @rating = 0, @opinions = 0 });
            await Load_photos_on_sever(id[0]);
            Radiator = new Product<Radiator>();
            Radiator.Attributes = new Radiator();
        }

        await json_Distinct.Laoddistinct();
        StateHasChanged();
    }

    private async Task AddRam()
    {
        if (edit)
        {
            string sql = "update products set prName = @prName, price = @Price,brand = @Brand,warranty = @Warranty where Id=@Id";
            await _data.Update(sql, new { @prName = ram.Name, @Price = ram.Price, @Brand = ram.Brand, @Warranty = ram.Warranty, @Id = ram.Id });
            string sql2 = "UPDATE Rams SET [photoSTR] = @PhotoSTR ,[series] = @Series ,[memory_type] = @Memory_type ,[memory_size_full] = @Memory_size_full ,[memory_size_single] = @Memory_size_single ,[items] = @Items ,[frequency] = @Frequency ,[cycle_latency] = @Cycle_latency ,[timings] = @Timings ,[tension] = @Tension ,[cooling] = @Cooling ,[memory_ecc] = @Memory_ecc ,[memory_backlight] = @Memory_backlight ,[additional_information] = @Additional_information ,[color] = @Color WHERE productID=@Id  ";
            await _data.Update(sql2, new { @PhotoSTR = ram.Attributes.PhotoSTR, @Series = ram.Attributes.Series, @Memory_type = ram.Attributes.Memory_type, @Memory_size_full = ram.Attributes.Memory_size_full, @Memory_size_single = ram.Attributes.Memory_size_single, @Items = ram.Attributes.Items, @Frequency = ram.Attributes.Frequency, @Cycle_latency = ram.Attributes.Cycle_latency, @Timings = ram.Attributes.Timings, @Tension = ram.Attributes.Tension, @Cooling = ram.Attributes.Cooling, @Memory_ecc = ram.Attributes.Memory_ecc, @Memory_backlight = ram.Attributes.Memory_backlight, @Additional_information = ram.Attributes.Additional_information, @Color = ram.Attributes.Color, @Id = editindex });
            editProducts.ram = await LoadProductsToEdit.Loadrams();
            editProducts.changevalue();
        }
        else
        {
            string sql = "insert into products (prName,price,brand,warranty) values (@prName,@Price,@Brand,@Warranty) SELECT CAST(scope_identity() AS int)";
            List<int> id = await _data.LoadData<int, dynamic>(sql, new { prName = ram.Name, Price = ram.Price, Brand = ram.Brand, Warranty = ram.Warranty });

            ram.Attributes.Photo = getPhotos(id[0]);

            string sql2 = "insert into Rams (productID,photoSTR,series,memory_type,memory_size_full,memory_size_single,items,frequency,cycle_latency,timings,tension,cooling,memory_ecc,memory_backlight,additional_information,color) values (@productID,@PhotoSTR,@Series,@Memory_type,@Memory_size_full,@Memory_size_single,@Items,@Frequency,@Cycle_latency,@Timings,@Tension,@Cooling,@Memory_ecc,@Memory_backlight,@Additional_information,@Color)";

            await _data.Update(sql2, new { @productID = id[0], @PhotoSTR = ram.Attributes.PhotoSTR, @Series = ram.Attributes.Series, @Memory_type = ram.Attributes.Memory_type, @Memory_size_full = ram.Attributes.Memory_size_full, @Memory_size_single = ram.Attributes.Memory_size_single, @Items = ram.Attributes.Items, @Frequency = ram.Attributes.Frequency, @Cycle_latency = ram.Attributes.Cycle_latency, @Timings = ram.Attributes.Timings, @Tension = ram.Attributes.Tension, @Cooling = ram.Attributes.Cooling, @Memory_ecc = ram.Attributes.Memory_ecc, @Memory_backlight = ram.Attributes.Memory_backlight, @Additional_information = ram.Attributes.Additional_information, @Color = ram.Attributes.Color });
            string sql3 = "insert into Stars ([productID],[rating],[opinions]) values (@productID,@rating,@opinions)";
            await _data.Update(sql3, new { @productID = id[0], @rating = 0, @opinions = 0 });
            await Load_photos_on_sever(id[0]);
            ram = new Product<Ram>();
            ram.Attributes = new Ram();
        }

        await json_Distinct.Laoddistinct();
        StateHasChanged();
    }

    private string[] getPhotos(int idproduct)
    {

        string[] PhotoSTR = new string[loadedFiles.Count];
        int index = 0;
        foreach (var item in loadedFiles)
        {
            var path = $"\\img\\" + idproduct + "_" + index + "." + item.ContentType.Split('/')[item.ContentType.Split('/').Length - 1];
            PhotoSTR[index] = path;
            index++;
        }
        return PhotoSTR;
    }


    private async Task Load_photos_on_sever(int idproduct)
    {
        int index = 0;
        foreach (var item in loadedFiles)
        {
            Stream stream = item.OpenReadStream();
            var path = $"\\img\\" + idproduct + "_" + index + "." + item.ContentType.Split('/')[item.ContentType.Split('/').Length - 1];
            FileStream fs = File.Create(env.WebRootPath + path);
            await stream.CopyToAsync(fs);
            stream.Close();
            fs.Close();
            index++;
        }
    }
    private void LoadFiles(InputFileChangeEventArgs e)
    {
        loadedFiles.Clear();

        foreach (var file in e.GetMultipleFiles(5))
        {
            try
            {
                loadedFiles.Add(file);
            }
            catch (Exception)
            {
                throw;
            }
        }
    }

    private string[] convertInputTextAreaToProjectSyntax(string input)
    {

        string[] result = input.Split("\n", StringSplitOptions.RemoveEmptyEntries).Select(x => x.Trim()).ToArray();


        return result;
    }

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private SqlDataAccess _data { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IWebHostEnvironment env { get; set; }
    }
}
#pragma warning restore 1591
